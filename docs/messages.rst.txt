.. cssclass:: f2b

.. _animationflowcontrol:

AnimationFlowControl
^^^^^^^^^^^^^^^^^^^^

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

ANIMATION_FLOW_CONTROL
Used for informing the backend of which frames have been received

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - received_frame
     - :carta:`AnimationFrame`
     - 
     - The latest flow control frame received
   * - animation_id
     - sfixed32
     - 
     - The animation ID that the flow control message belongs to
   * - timestamp
     - sfixed64
     - 
     - Timestamp at which the frame was received

.. cssclass:: f2b

.. _startanimation:

StartAnimation
^^^^^^^^^^^^^^

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

START_ANIMATION:
Starts an animation, as defined by the start, stop and step definitions.
Backend responds with :carta:`START_ANIMATION_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the animation describes.
   * - first_frame
     - :carta:`AnimationFrame`
     - 
     - The lower bound of the animation when looping.
   * - start_frame
     - :carta:`AnimationFrame`
     - 
     - The starting point of the animation.
   * - last_frame
     - :carta:`AnimationFrame`
     - 
     - The upper bound of the animation.
   * - delta_frame
     - :carta:`AnimationFrame`
     - 
     - The frame change step for the animation. For example, a delta frame of {channel=1, stokes=0} would step through each channel in the file.
   * - frame_rate
     - sfixed32
     - 
     - Frame rate per second
   * - looping
     - bool
     - 
     - Whether to loop the animation indefinitely.
   * - reverse
     - bool
     - 
     - Whether to reverse the animation direction when endFrame is reached.
   * - required_tiles
     - :carta:`AddRequiredTiles`
     - 
     - Required tiles when changing channels
   * - matched_frames
     - map<key: sfixed32, value: :carta:`MatchedFrameList`>
     - repeated
     - 

.. cssclass:: b2f

.. _startanimationack:

StartAnimationAck
^^^^^^^^^^^^^^^^^

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

START_ANIMATION_ACK
Response for :carta:`START_ANIMATION`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:`START_ANIMATION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - animation_id
     - sfixed32
     - 
     - The animation ID of the new animation

.. cssclass:: f2b

.. _stopanimation:

StopAnimation
^^^^^^^^^^^^^

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

STOP_ANIMATION
Stops the playing animation

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the animation describes.
   * - end_frame
     - :carta:`AnimationFrame`
     - 
     - The ending point of the animation.

.. cssclass:: f2b

.. _catalogfileinforequest:

CatalogFileInfoRequest
^^^^^^^^^^^^^^^^^^^^^^

Source file: `request/catalog_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_file_info.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 
   * - name
     - string
     - 
     - 

.. cssclass:: b2f

.. _catalogfileinforesponse:

CatalogFileInfoResponse
^^^^^^^^^^^^^^^^^^^^^^^

Source file: `request/catalog_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_file_info.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - file_info
     - :carta:`CatalogFileInfo`
     - 
     - 
   * - headers
     - :carta:`CatalogHeader`
     - repeated
     - 

.. cssclass:: f2b

.. _catalogfilterrequest:

CatalogFilterRequest
^^^^^^^^^^^^^^^^^^^^

Source file: `stream/catalog_filter.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/catalog_filter.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - column_indices
     - int32
     - repeated
     - 
   * - filter_configs
     - :carta:`FilterConfig`
     - repeated
     - 
   * - subset_data_size
     - sfixed32
     - 
     - 
   * - subset_start_index
     - sfixed32
     - 
     - 
   * - image_bounds
     - :carta:`CatalogImageBounds`
     - 
     - 
   * - image_file_id
     - sfixed32
     - 
     - 
   * - region_id
     - sfixed32
     - 
     - 
   * - sort_column
     - string
     - 
     - 
   * - sorting_type
     - :carta:`SortingType`
     - 
     - 

.. cssclass:: b2f

.. _catalogfilterresponse:

CatalogFilterResponse
^^^^^^^^^^^^^^^^^^^^^

Source file: `stream/catalog_filter.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/catalog_filter.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - image_file_id
     - sfixed32
     - 
     - 
   * - region_id
     - sfixed32
     - 
     - 
   * - columns
     - map<key: fixed32, value: :carta:`ColumnData`>
     - repeated
     - 
   * - subset_data_size
     - sfixed32
     - 
     - 
   * - subset_end_index
     - sfixed32
     - 
     - 
   * - progress
     - float
     - 
     - 
   * - filter_data_size
     - sfixed32
     - 
     - 
   * - request_end_index
     - sfixed32
     - 
     - 

.. cssclass:: f2b

.. _cataloglistrequest:

CatalogListRequest
^^^^^^^^^^^^^^^^^^

Source file: `request/catalog_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_list.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 

.. cssclass:: b2f

.. _cataloglistresponse:

CatalogListResponse
^^^^^^^^^^^^^^^^^^^

Source file: `request/catalog_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_list.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - directory
     - string
     - 
     - 
   * - parent
     - string
     - 
     - 
   * - files
     - :carta:`CatalogFileInfo`
     - repeated
     - 
   * - subdirectories
     - string
     - repeated
     - 

.. cssclass:: f2b

.. _closefile:

CloseFile
^^^^^^^^^

Source file: `control/close_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/close_file.proto>`_

CLOSE_FILE:
Instructs the backend to close a file with a given file ID

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which "file" slot to close

.. cssclass:: f2b

.. _setcontourparameters:

SetContourParameters
^^^^^^^^^^^^^^^^^^^^

Source file: `control/contour.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/contour.proto>`_

SET_CONTOUR_PARAMETERS
Sets the contour parameters for a file

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - fixed32
     - 
     - The file ID that the contour corresponds to
   * - reference_file_id
     - fixed32
     - 
     - The file ID of the reference image that the contour vertices should be mapped to
   * - image_bounds
     - :carta:`ImageBounds`
     - 
     - The XY bounds corresponding to the image data in pixel coordinates
   * - levels
     - double
     - repeated
     - Contour levels
   * - smoothing_mode
     - :carta:`SmoothingMode`
     - 
     - Pre-contouring smoothing mode
   * - smoothing_factor
     - int32
     - 
     - Contour smoothness factor. For block averaging, this is the block width For Gaussian smoothing, this defines both the Gaussian width, and the kernel size
   * - decimation_factor
     - int32
     - 
     - Decimation factor, indicates to what 1/Nth of a pixel the contour vertices should be rounded to
   * - compression_level
     - int32
     - 
     - Zstd compression level
   * - contour_chunk_size
     - int32
     - 
     - Size of contour chunks, in number of vertices. If this is set to zero, partial contour results are not used

.. cssclass:: b2f

.. _contourimagedata:

ContourImageData
^^^^^^^^^^^^^^^^

Source file: `stream/contour_image.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/contour_image.proto>`_

CONTOUR_IMAGE_DATA:
Data for an image rendered in contour mode.

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the contour image corresponds to
   * - reference_file_id
     - fixed32
     - 
     - The file ID of the reference image that the contour vertices are mapped to
   * - image_bounds
     - :carta:`ImageBounds`
     - 
     - The bounding box in the XY plane corresponding to the image data in pixel coordinates
   * - channel
     - sfixed32
     - 
     - The image channel used to generate the contours
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the contours
   * - contour_sets
     - :carta:`ContourSet`
     - repeated
     - Each contour set consists of the contour level value, as well as a list of coordinates. The start_indices list is used to determine how to subdivide the coordinates list into separate poly-lines when rendering.
   * - progress
     - double
     - 
     - Progress of the contour sets being sent. If this is zero, the message is assumed to contain the entire contour sets

.. cssclass:: b2f

.. _contourset:

ContourSet
^^^^^^^^^^

Source file: `stream/contour_image.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/contour_image.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - level
     - double
     - 
     - 
   * - decimation_factor
     - int32
     - 
     - 
   * - raw_coordinates
     - bytes
     - 
     - 
   * - raw_start_indices
     - bytes
     - 
     - 
   * - uncompressed_coordinates_size
     - int32
     - 
     - 

.. cssclass:: b2f

.. _errordata:

ErrorData
^^^^^^^^^

Source file: `stream/error.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/error.proto>`_

ERROR_DATA:
Stream of error/warning/info data. This stream is used to present the frontend with additional information on
the state of the backend, and is not used in place of returning success=false on requests or commands.

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - severity
     - :carta:`ErrorSeverity`
     - 
     - The severity of the error. Critical errors are reserved for errors that would normally require the user to restart the program or reload the page
   * - tags
     - string
     - repeated
     - A list of strings describing the error type, that the frontend can interpret and react to. For example, “file_io” or “memory”.
   * - message
     - string
     - 
     - The error message
   * - data
     - string
     - 
     - Accompanying error data. For example, if an error has the “file_io” tag, the frontend would expect the data field to contain the file ID of the offending file.

.. cssclass:: f2b

.. _exportregion:

ExportRegion
^^^^^^^^^^^^

Source file: `control/export_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/export_region.proto>`_

EXPORT_REGION:
Requests exporting the specified regions to a file on the server.
If directory and file are blank, return file contents for export on client.
Backend responds with  :carta:`EXPORT_REGION_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - type
     - :carta:`FileType`
     - 
     - Required file type
   * - coord_type
     - :carta:`CoordinateType`
     - 
     - Required coordinate type pixel/world
   * - file_id
     - sfixed32
     - 
     - File id for the coordinate system to use
   * - region_styles
     - map<key: sfixed32, value: :carta:`RegionStyle`>
     - repeated
     - Region ids and style params to export
   * - directory
     - string
     - 
     - Optional directory name of server file
   * - file
     - string
     - 
     - Optional file name of server file

.. cssclass:: b2f

.. _exportregionack:

ExportRegionAck
^^^^^^^^^^^^^^^

Source file: `control/export_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/export_region.proto>`_

EXPORT_REGION_ACK
Response for :carta:`EXPORT_REGION` to indicate success and file contents if on client.

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:`EXPORT_REGION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - contents
     - string
     - repeated
     - File contents for client export (one line per string)

.. cssclass:: f2b

.. _fileinforequest:

FileInfoRequest
^^^^^^^^^^^^^^^

Source file: `request/file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_info.proto>`_

FILE_INFO_REQUEST:
Requests the file info for a specific file.
Backend responds with :carta:`FILE_INFO_RESPONSE`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - file
     - string
     - 
     - Required file name
   * - hdu
     - string
     - 
     - Required HDU name (if applicable). If left empty, the first HDU is selected

.. cssclass:: b2f

.. _fileinforesponse:

FileInfoResponse
^^^^^^^^^^^^^^^^

Source file: `request/file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_info.proto>`_

FILE_INFO_RESPONSE
Response for :carta:`FILE_INFO_REQUEST`.
Gives information on the requested file

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the :carta:`FILE_INFO_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - file_info
     - :carta:`FileInfo`
     - 
     - Basic file info (type, size)
   * - file_info_extended
     - :carta:`FileInfoExtended`
     - 
     - Extended file info (WCS, header info)

.. cssclass:: f2b

.. _filelistrequest:

FileListRequest
^^^^^^^^^^^^^^^

Source file: `request/file_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_list.proto>`_

FILE_LIST_REQUEST:
Requests the list of available files for a given directory.
Backend responds with :carta:`FILE_LIST_RESPONSE`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name

.. cssclass:: b2f

.. _filelistresponse:

FileListResponse
^^^^^^^^^^^^^^^^

Source file: `request/file_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_list.proto>`_

FILE_LIST_RESPONSE
Response for :carta:`FILE_LIST_REQUEST`.
Gives a list of available files (and their types), as well as subdirectories

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the :carta:`FILE_LIST_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - directory
     - string
     - 
     - Directory of listing
   * - parent
     - string
     - 
     - Directory parent (null/empty if top-level)
   * - files
     - :carta:`FileInfo`
     - repeated
     - List of available image files, with file type information and size information.
   * - subdirectories
     - string
     - repeated
     - List of available subdirectories

.. cssclass:: f2b

.. _importregion:

ImportRegion
^^^^^^^^^^^^

Source file: `control/import_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/import_region.proto>`_

IMPORT_REGION:
Requests the opening and applying of a specific region file.
Backend responds with  :carta:`IMPORT_REGION_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - group_id
     - sfixed32
     - 
     - Required WCS group id (may be a single file id)
   * - type
     - :carta:`FileType`
     - 
     - Required file type
   * - directory
     - string
     - 
     - Optional directory name of server file
   * - file
     - string
     - 
     - Optional file name of server file
   * - contents
     - string
     - repeated
     - Optional file contents of client file (1 line per string)

.. cssclass:: b2f

.. _importregionack:

ImportRegionAck
^^^^^^^^^^^^^^^

Source file: `control/import_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/import_region.proto>`_

IMPORT_REGION_ACK
Response for :carta:`IMPORT_REGION`. Also supplies region properties

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:`IMPORT_REGION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - regions
     - map<key: sfixed32, value: :carta:`RegionInfo`>
     - repeated
     - Map region id to parameters
   * - region_styles
     - map<key: sfixed32, value: :carta:`RegionStyle`>
     - repeated
     - Map region id to style parameters

.. cssclass:: b2f

.. _momentprogress:

MomentProgress
^^^^^^^^^^^^^^

Source file: `request/moment_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/moment_request.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - progress
     - float
     - 
     - 

.. cssclass:: f2b

.. _momentrequest:

MomentRequest
^^^^^^^^^^^^^

Source file: `request/moment_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/moment_request.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - moments
     - :carta:`Moment`
     - repeated
     - 
   * - axis
     - :carta:`MomentAxis`
     - 
     - 
   * - region_id
     - sfixed32
     - 
     - 
   * - spectral_range
     - :carta:`IntBounds`
     - 
     - 
   * - mask
     - :carta:`MomentMask`
     - 
     - 
   * - pixel_range
     - :carta:`FloatBounds`
     - 
     - 

.. cssclass:: b2f

.. _momentresponse:

MomentResponse
^^^^^^^^^^^^^^

Source file: `request/moment_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/moment_request.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - open_file_acks
     - :carta:`OpenFileAck`
     - repeated
     - 

.. cssclass:: f2b

.. _closecatalogfile:

CloseCatalogFile
^^^^^^^^^^^^^^^^

Source file: `control/open_catalog_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_catalog_file.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 

.. cssclass:: f2b

.. _opencatalogfile:

OpenCatalogFile
^^^^^^^^^^^^^^^

Source file: `control/open_catalog_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_catalog_file.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 
   * - name
     - string
     - 
     - 
   * - file_id
     - sfixed32
     - 
     - 
   * - preview_data_size
     - sfixed32
     - 
     - 

.. cssclass:: b2f

.. _opencatalogfileack:

OpenCatalogFileAck
^^^^^^^^^^^^^^^^^^

Source file: `control/open_catalog_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_catalog_file.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - file_id
     - sfixed32
     - 
     - 
   * - file_info
     - :carta:`CatalogFileInfo`
     - 
     - 
   * - data_size
     - sfixed32
     - 
     - 
   * - headers
     - :carta:`CatalogHeader`
     - repeated
     - 
   * - preview_data
     - map<key: fixed32, value: :carta:`ColumnData`>
     - repeated
     - 

.. cssclass:: f2b

.. _openfile:

OpenFile
^^^^^^^^

Source file: `control/open_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_file.proto>`_

OPEN_FILE:
Requests the opening of a specific file.
Backend responds with  :carta:`OPEN_FILE_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - file
     - string
     - 
     - Required file name
   * - hdu
     - string
     - 
     - Which HDU to load (if applicable). If left blank, the first HDU will be used
   * - file_id
     - sfixed32
     - 
     - Which "file" slot to load the file into (when viewing multiple files)
   * - render_mode
     - :carta:`RenderMode`
     - 
     - The render mode to use. Additional modes will be added in subsequent versions.

.. cssclass:: b2f

.. _openfileack:

OpenFileAck
^^^^^^^^^^^

Source file: `control/open_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_file.proto>`_

OPEN_FILE_ACK
Response for :carta:`OPEN_FILE`. Also supplies file information

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:`OPEN_FILE` was successful
   * - file_id
     - sfixed32
     - 
     - Which file slot the file was loaded into (when viewing multiple files)
   * - message
     - string
     - 
     - Error message (if applicable)
   * - file_info
     - :carta:`FileInfo`
     - 
     - Basic file info (type, size)
   * - file_info_extended
     - :carta:`FileInfoExtended`
     - 
     - Extended file info (WCS, header info)
   * - file_feature_flags
     - fixed32
     - 
     - Optional bitflags specifying feature flags of the file being opened.

.. cssclass:: b2f

.. _rastertiledata:

RasterTileData
^^^^^^^^^^^^^^

Source file: `stream/raster_tile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/raster_tile.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the raster image corresponds to
   * - channel
     - sfixed32
     - 
     - The image channel (z-coordinate)
   * - stokes
     - sfixed32
     - 
     - The image stokes coordinate
   * - compression_type
     - :carta:`CompressionType`
     - 
     - The compression algorithm used.
   * - compression_quality
     - float
     - 
     - Compression quality switch
   * - animation_id
     - sfixed32
     - 
     - The ID of the animation (if any)
   * - tiles
     - :carta:`TileData`
     - repeated
     - List of tile data

.. cssclass:: b2f

.. _rastertilesync:

RasterTileSync
^^^^^^^^^^^^^^

Source file: `stream/raster_tile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/raster_tile.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the raster image corresponds to
   * - channel
     - sfixed32
     - 
     - The image channel (z-coordinate)
   * - stokes
     - sfixed32
     - 
     - The image stokes coordinate
   * - animation_id
     - sfixed32
     - 
     - The ID of the animation (if any)
   * - end_sync
     - bool
     - 
     - Is this a start or end sync message?

.. cssclass:: b2f

.. _tiledata:

TileData
^^^^^^^^

Source file: `stream/raster_tile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/raster_tile.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - layer
     - sfixed32
     - 
     - Tile layer coordinate
   * - x
     - sfixed32
     - 
     - Tile x coordinate
   * - y
     - sfixed32
     - 
     - Tile y coordinate
   * - width
     - sfixed32
     - 
     - Width of the tile data. If this is left as zero, the default tile size should be used
   * - height
     - sfixed32
     - 
     - Height of the tile data. If this is left as zero, the default tile size should be used
   * - image_data
     - bytes
     - 
     - Image data. For uncompressed data, this is converted into FP32, while for compressed data, this is passed to the compression library for decompression.
   * - nan_encodings
     - bytes
     - 
     - Run-length encodings of NaN values. These values are used to restore the NaN values after decompression.

.. cssclass:: f2b

.. _removeregion:

RemoveRegion
^^^^^^^^^^^^

Source file: `control/region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region.proto>`_

REMOVE_REGION:
Removes a region

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - region_id
     - sfixed32
     - 
     - Unique region ID of the region to be removed

.. cssclass:: f2b

.. _setregion:

SetRegion
^^^^^^^^^

Source file: `control/region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region.proto>`_

SET_REGION:
Creates or updates a region. Backend responds with :carta:`SET_REGION_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - File slot of the reference image
   * - region_id
     - sfixed32
     - 
     - Unique region ID. <=0 if a new region is being created.
   * - region_info
     - :carta:`RegionInfo`
     - 
     - Region parameters

.. cssclass:: b2f

.. _setregionack:

SetRegionAck
^^^^^^^^^^^^

Source file: `control/region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region.proto>`_

SET_REGION_ACK:
Response for :carta:`SET_REGION`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:`SET_REGION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - region_id
     - sfixed32
     - 
     - The unique region ID. If the region is updated, this will be the same as the region ID specified in :carta:`SET_REGION`. If  a new region is being created, the ID of the new region will be passed back.

.. cssclass:: f2b

.. _regionfileinforequest:

RegionFileInfoRequest
^^^^^^^^^^^^^^^^^^^^^

Source file: `request/region_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_file_info.proto>`_

REGION_FILE_INFO_REQUEST:
Requests contents for a specific region file on the server
Backend responds with :carta:`REGION_FILE_INFO_RESPONSE`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - file
     - string
     - 
     - Required file name

.. cssclass:: b2f

.. _regionfileinforesponse:

RegionFileInfoResponse
^^^^^^^^^^^^^^^^^^^^^^

Source file: `request/region_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_file_info.proto>`_

REGION_FILE_INFO_RESPONSE
Response for :carta:`REGION_FILE_INFO_REQUEST`.
Gives information on the requested file

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the REGION_INFO_REQUEST was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - file_info
     - :carta:`FileInfo`
     - 
     - Basic info about region file
   * - contents
     - string
     - repeated
     - Contents of file; each string is a line

.. cssclass:: b2f

.. _regionhistogramdata:

RegionHistogramData
^^^^^^^^^^^^^^^^^^^

Source file: `stream/region_histogram.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/region_histogram.proto>`_

REGION_HISTOGRAM_DATA:
Stats data for a specific region

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the profile corresponds to
   * - region_id
     - sfixed32
     - 
     - The region_id corresponding to these histograms. If the histograms correspond to the entire current 2D image, the region ID has a value of -1.
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the profiles
   * - histograms
     - :carta:`Histogram`
     - repeated
     - array of histograms of the current region
   * - progress
     - float
     - 
     - Progress indicator, in the case of partial histogram results being sent

.. cssclass:: f2b

.. _regionlistrequest:

RegionListRequest
^^^^^^^^^^^^^^^^^

Source file: `request/region_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_list.proto>`_

REGION_LIST_REQUEST:
Requests the list of available region files for a given directory.
Backend responds with :carta:`REGION_LIST_RESPONSE`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name

.. cssclass:: b2f

.. _regionlistresponse:

RegionListResponse
^^^^^^^^^^^^^^^^^^

Source file: `request/region_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_list.proto>`_

REGION_LIST_RESPONSE
Response for :carta:`REGION_LIST_REQUEST`.
Gives a list of available region files (and their types), as well as subdirectories

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the :carta:`REGION_LIST_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - directory
     - string
     - 
     - Directory of listing
   * - parent
     - string
     - 
     - Directory parent (null/empty if top-level)
   * - files
     - :carta:`FileInfo`
     - repeated
     - List of available image files, with file type information and size information.
   * - subdirectories
     - string
     - repeated
     - List of available subdirectories

.. cssclass:: f2b

.. _sethistogramrequirements:

SetHistogramRequirements
^^^^^^^^^^^^^^^^^^^^^^^^

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_HISTOGRAM_REQUIREMENTS:
Sets which histogram data needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of -1 is given, this corresponds to the entire 2D image.
   * - histograms
     - :carta:`HistogramConfig`
     - repeated
     - List of required histograms, along with the number of bins. If the channel is -1, the current channel is used. If the channel is -2, the histogram is constructed over all channels. If the number of bins is less than zero, an automatic bin size is used, based on the number of values.

.. cssclass:: f2b

.. _histogramconfig:

HistogramConfig
^^^^^^^^^^^^^^^

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - channel
     - sfixed32
     - 
     - 
   * - num_bins
     - sfixed32
     - 
     - 

.. cssclass:: f2b

.. _setregionrequirements:

SetRegionRequirements
^^^^^^^^^^^^^^^^^^^^^

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_REGION_REQUIREMENTS:
Sets which spatial profile data needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - fixed32
     - 
     - 
   * - region_id
     - fixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of 0 is given, this corresponds to the point region defined by the cursor position.
   * - x
     - bool
     - 
     - Is the X-profile (of the current Stokes parameter) required?
   * - y
     - bool
     - 
     - Is the Y-profile (of the current Stokes parameter) required?
   * - z
     - bool
     - 
     - Is the Z-profile (of the current Stokes parameter) required?
   * - additional_profiles
     - string
     - repeated
     - List of additional profiles needed (for example, [“Qz”, “Uz”]) will include the Z-profile of the Q and U Stokes cube, regardless of which Stokes parameter is currently in use.

.. cssclass:: f2b

.. _setspatialrequirements:

SetSpatialRequirements
^^^^^^^^^^^^^^^^^^^^^^

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_SPATIAL_REQUIREMENTS:
Sets which information needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of 0 is given, this corresponds to the point region defined by the cursor position.
   * - spatial_profiles
     - string
     - repeated
     - List of spatial profiles needed. If no Stokes parameter is specified (i.e. just “x” or “y”), the active Stokes parameter is used.

.. cssclass:: f2b

.. _setspectralrequirements:

SetSpectralRequirements
^^^^^^^^^^^^^^^^^^^^^^^

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_SPECTRAL_REQUIREMENTS:
Sets which spectral profile data needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of 0 is given, this corresponds to the point region defined by the cursor position.
   * - spectral_profiles
     - :carta:`SpectralConfig`
     - repeated
     - List of spectral profiles needed, along with which stats types are needed for each profile. If no Stokes parameter is specified (i.e. just “z”) or if the coordinate is empty, the active Stokes parameter is used. If the region is a point region, the statsTypes field is ignored.

.. cssclass:: f2b

.. _spectralconfig:

SpectralConfig
^^^^^^^^^^^^^^

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - coordinate
     - string
     - 
     - 
   * - stats_types
     - :carta:`StatsType`
     - repeated
     - 

.. cssclass:: f2b

.. _setstatsrequirements:

SetStatsRequirements
^^^^^^^^^^^^^^^^^^^^

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_STATS_REQUIREMENTS:
Sets which stats data needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of -1 is given, this corresponds to the entire 2D image.
   * - stats
     - :carta:`StatsType`
     - repeated
     - List of required stats

.. cssclass:: b2f

.. _regionstatsdata:

RegionStatsData
^^^^^^^^^^^^^^^

Source file: `stream/region_stats.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/region_stats.proto>`_

REGION_STATS_DATA:
Stats data for a specific region

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the profile corresponds to
   * - region_id
     - sfixed32
     - 
     - The region_id corresponding to this profile. If the statistics data corresponds to the entire current 2D image, the region ID has a value of -1.
   * - channel
     - sfixed32
     - 
     - The image channel used to generate the statistics
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the profiles
   * - statistics
     - :carta:`StatisticsValue`
     - repeated
     - Array of statistics values, each corresponding to a particular measurement, such as max, min, mean, etc

.. cssclass:: f2b

.. _registerviewer:

RegisterViewer
^^^^^^^^^^^^^^

Source file: `control/register_viewer.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/register_viewer.proto>`_

REGISTER_VIEWER:
Registers the viewer with the backend.
Responds with :carta:`REGISTER_VIEWER_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - session_id
     - fixed32
     - 
     - Unique session ID parameter (can be generated using UUID libraries). Passing in an existing session ID can be used for resuming sessions
   * - api_key
     - string
     - 
     - Optional user-specific API key to be used for basic authentication. Could be an encrypted JWT for secure authentication.
   * - client_feature_flags
     - fixed32
     - 
     - Optional feature bitflag specifying client-side feature set

.. cssclass:: b2f

.. _registerviewerack:

RegisterViewerAck
^^^^^^^^^^^^^^^^^

Source file: `control/register_viewer.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/register_viewer.proto>`_

REGISTER_VIEWER_ACK
Acknowledgement response for :carta:`REGISTER_VIEWER`.
Informs the frontend whether the session was correctly.

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - session_id
     - fixed32
     - 
     - Unique session ID
   * - success
     - bool
     - 
     - Defines whether the :carta:`REGISTER_VIEWER` command was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - session_type
     - :carta:`SessionType`
     - 
     - Defines the type of session established
   * - server_feature_flags
     - fixed32
     - 
     - Optional feature bitflag specifying server-side feature set
   * - user_preferences
     - map<key: string, value: string>
     - repeated
     - Map of user preferences retrieved from the server database. If this is empty and the server does not have the USER_PREFERENCES feature flag set, then the user preferences are read from localStorage instead.
   * - user_layouts
     - map<key: string, value: string>
     - repeated
     - Map of user layouts retrieved from the server database

.. cssclass:: f2b

.. _imageproperties:

ImageProperties
^^^^^^^^^^^^^^^

Source file: `control/resume_session.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/resume_session.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 
   * - file
     - string
     - 
     - 
   * - hdu
     - string
     - 
     - 
   * - file_id
     - sfixed32
     - 
     - 
   * - render_mode
     - :carta:`RenderMode`
     - 
     - 
   * - channel
     - sfixed32
     - 
     - 
   * - stokes
     - sfixed32
     - 
     - 
   * - regions
     - map<key: sfixed32, value: :carta:`RegionInfo`>
     - repeated
     - 
   * - contour_settings
     - :carta:`SetContourParameters`
     - 
     - 

.. cssclass:: f2b

.. _resumesession:

ResumeSession
^^^^^^^^^^^^^

Source file: `control/resume_session.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/resume_session.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - images
     - :carta:`ImageProperties`
     - repeated
     - 
   * - catalog_files
     - :carta:`OpenCatalogFile`
     - repeated
     - 

.. cssclass:: b2f

.. _resumesessionack:

ResumeSessionAck
^^^^^^^^^^^^^^^^

Source file: `control/resume_session.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/resume_session.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 

.. cssclass:: f2b

.. _savefile:

SaveFile
^^^^^^^^

Source file: `request/save_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/save_file.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - output_file_directory
     - string
     - 
     - 
   * - output_file_name
     - string
     - 
     - 
   * - output_file_type
     - :carta:`FileType`
     - 
     - 

.. cssclass:: f2b

.. _savefileack:

SaveFileAck
^^^^^^^^^^^

Source file: `request/save_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/save_file.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 

.. cssclass:: f2b

.. _scriptingrequest:

ScriptingRequest
^^^^^^^^^^^^^^^^

Source file: `request/scripting.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/scripting.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - scripting_request_id
     - sfixed32
     - 
     - Used to connect a single scripting request to its response
   * - target
     - string
     - 
     - the path of the target object. e.g. activeFrame.renderConfig
   * - action
     - string
     - 
     - the name of the function to call. e.g. setColorMap
   * - parameters
     - string
     - 
     - JSON array of paramters. e.g. '["viridis"]'
   * - async
     - bool
     - 
     - flag indicating whether the frontend should execute this asynchronously, or only return once the call is complete

.. cssclass:: b2f

.. _scriptingresponse:

ScriptingResponse
^^^^^^^^^^^^^^^^^

Source file: `request/scripting.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/scripting.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - scripting_request_id
     - sfixed32
     - 
     - should match the incoming request ID
   * - success
     - bool
     - 
     - indicates whether the call was correctly executed
   * - message
     - string
     - 
     - optional error message
   * - response
     - string
     - 
     - JSON-parsable response. e.g. "true", or the base64-encoded string

.. cssclass:: f2b

.. _setcursor:

SetCursor
^^^^^^^^^

Source file: `control/set_cursor.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/set_cursor.proto>`_

SET_CURSOR:
Sets the current cursor position in image space coordinates.
The cursor defines a special case of a region, with a single control point.

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the cursor is moving over
   * - point
     - :carta:`Point`
     - 
     - XY-coordinates of cursor in image space
   * - spatial_requirements
     - :carta:`SetSpatialRequirements`
     - 
     - Optional accompanying spatial requirements message to be processed prior to cursor update

.. cssclass:: f2b

.. _setimagechannels:

SetImageChannels
^^^^^^^^^^^^^^^^

Source file: `control/set_image_channels.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/set_image_channels.proto>`_

SET_IMAGE_CHANNELS
Sets the current image channel and Stokes parameter

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the view corresponds to
   * - channel
     - sfixed32
     - 
     - The image channel (Z-coordinate)
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter
   * - required_tiles
     - :carta:`AddRequiredTiles`
     - 
     - Required tiles when changing channels

.. cssclass:: b2f

.. _spatialprofiledata:

SpatialProfileData
^^^^^^^^^^^^^^^^^^

Source file: `stream/spatial_profile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/spatial_profile.proto>`_

SPATIAL_PROFILE_DATA:
Data for spatial profile set for a specific file

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the profile corresponds to
   * - region_id
     - sfixed32
     - 
     - The region_id corresponding to this profile. If the profile corresponds to the cursor position, the region ID is zero.
   * - x
     - sfixed32
     - 
     - The pixel X-coordinate of the profile set
   * - y
     - sfixed32
     - 
     - The pixel Y-coordinate of the profile set
   * - channel
     - sfixed32
     - 
     - The image channel used to generate the profiles
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the profiles
   * - value
     - float
     - 
     - The value of the image at the given coordinates
   * - profiles
     - :carta:`SpatialProfile`
     - repeated
     - Spatial profiles for each required profile type

.. cssclass:: f2b

.. _spectrallinerequest:

SpectralLineRequest
^^^^^^^^^^^^^^^^^^^

Source file: `control/spectral_line_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/spectral_line_request.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - frequency_range
     - :carta:`DoubleBounds`
     - 
     - 
   * - line_intensity_lower_limit
     - double
     - 
     - 

.. cssclass:: f2b

.. _spectrallineresponse:

SpectralLineResponse
^^^^^^^^^^^^^^^^^^^^

Source file: `control/spectral_line_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/spectral_line_request.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - data_size
     - sfixed32
     - 
     - 
   * - headers
     - :carta:`CatalogHeader`
     - repeated
     - 
   * - spectral_line_data
     - map<key: fixed32, value: :carta:`ColumnData`>
     - repeated
     - 

.. cssclass:: b2f

.. _spectralprofiledata:

SpectralProfileData
^^^^^^^^^^^^^^^^^^^

Source file: `stream/spectral_profile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/spectral_profile.proto>`_

SPECTRAL_PROFILE_DATA:
Data for spectral profile set for a specific file

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the profile corresponds to
   * - region_id
     - sfixed32
     - 
     - The region ID that the stats data corresponds to. If the profile corresponds to the cursor position, the region ID has a value of 0.
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the profiles
   * - progress
     - float
     - 
     - Progress indicator, in the case of partial profile results being sent. If the profile calculations are time-consuming, regular updates should be sent to the frontend. If the data is complete, progress >= 1.
   * - profiles
     - :carta:`SpectralProfile`
     - repeated
     - Spatial profiles for each required profile type

.. cssclass:: f2b

.. _stopmomentcalc:

StopMomentCalc
^^^^^^^^^^^^^^

Source file: `control/stop_moment_calc.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/stop_moment_calc.proto>`_



.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Stop the moment calculation with respect to the image file id

.. cssclass:: f2b

.. _addrequiredtiles:

AddRequiredTiles
^^^^^^^^^^^^^^^^

Source file: `control/tiles.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/tiles.proto>`_

ADD_REQUIRED_TILES
Provides a list of tiles that are required for the specified file

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the view corresponds to
   * - tiles
     - sfixed32
     - repeated
     - The list of tiles required, in encoded coordinate
   * - compression_type
     - :carta:`CompressionType`
     - 
     - The compression algorithm used
   * - compression_quality
     - float
     - 
     - Compression quality switch

.. cssclass:: f2b

.. _removerequiredtiles:

RemoveRequiredTiles
^^^^^^^^^^^^^^^^^^^

Source file: `control/tiles.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/tiles.proto>`_

REMOVE_REQUIRED_TILES
Provides a list of tiles that are required for the specified file

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the view corresponds to
   * - tiles
     - sfixed32
     - repeated
     - The list of tiles required, in encoded coordinate

.. cssclass:: f2b

.. _setuserlayout:

SetUserLayout
^^^^^^^^^^^^^

Source file: `control/user_layout.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/user_layout.proto>`_

SET_USER_LAYOUT:
Sets or clears a user layout.
Backend responds with  :carta:`SET_USER_LAYOUT_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - name
     - string
     - 
     - Name of the layout to update. If no layout with the given name is present in the server database, a new layout is created
   * - value
     - string
     - 
     - JSON string representing the layout. If the value is empty, the user layout is cleared from the server database.

.. cssclass:: b2f

.. _setuserlayoutack:

SetUserLayoutAck
^^^^^^^^^^^^^^^^

Source file: `control/user_layout.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/user_layout.proto>`_

SET_USER_LAYOUT_ACK
Response for :carta:`SET_USER_LAYOUT`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:`SET_USER_LAYOUT` was successful  Error message (if applicable)

.. cssclass:: f2b

.. _setuserpreferences:

SetUserPreferences
^^^^^^^^^^^^^^^^^^

Source file: `control/user_preferences.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/user_preferences.proto>`_

SET_USER_PREFERENCES:
Sets or clears one or more user preferences.
Backend responds with  :carta:`SET_USER_PREFERENCES_ACK`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - preference_map
     - map<key: string, value: string>
     - repeated
     - 

.. cssclass:: b2f

.. _setuserpreferencesack:

SetUserPreferencesAck
^^^^^^^^^^^^^^^^^^^^^

Source file: `control/user_preferences.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/user_preferences.proto>`_

SET_USER_PREFERENCES_ACK
Response for :carta:`SET_USER_PREFERENCES`

.. list-table::
   :widths: 25 25 10 40
   :header-rows: 1

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:`SET_USER_PREFERENCES` was successful  Error message (if applicable)

