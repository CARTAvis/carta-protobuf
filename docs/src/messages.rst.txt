.. carta:class:: carta-f2b addrequiredtiles

.. _addrequiredtiles:

AddRequiredTiles
~~~~~~~~~~~~~~~~

Source file: `control/tiles.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/tiles.proto>`_

ADD_REQUIRED_TILES
Provides a list of tiles that are required for the specified file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the view corresponds to
   * - tiles
     - sfixed32
     - repeated
     - The list of tiles required, in encoded coordinate
   * - compression_type
     - :carta:refc:`CompressionType`
     - 
     - The compression algorithm used
   * - compression_quality
     - float
     - 
     - Compression quality switch

.. carta:class:: carta-f2b animationflowcontrol

.. _animationflowcontrol:

AnimationFlowControl
~~~~~~~~~~~~~~~~~~~~

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

ANIMATION_FLOW_CONTROL
Used for informing the backend of which frames have been received

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - received_frame
     - :carta:refc:`AnimationFrame`
     - 
     - The latest flow control frame received
   * - animation_id
     - sfixed32
     - 
     - The animation ID that the flow control message belongs to
   * - timestamp
     - sfixed64
     - 
     - Timestamp at which the frame was received

.. carta:class:: carta-f2b catalogfileinforequest

.. _catalogfileinforequest:

CatalogFileInfoRequest
~~~~~~~~~~~~~~~~~~~~~~

Source file: `request/catalog_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_file_info.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 
   * - name
     - string
     - 
     - 

.. carta:class:: carta-b2f catalogfileinforesponse

.. _catalogfileinforesponse:

CatalogFileInfoResponse
~~~~~~~~~~~~~~~~~~~~~~~

Source file: `request/catalog_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_file_info.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - file_info
     - :carta:refc:`CatalogFileInfo`
     - 
     - 
   * - headers
     - :carta:refc:`CatalogHeader`
     - repeated
     - 

.. carta:class:: carta-f2b catalogfilterrequest

.. _catalogfilterrequest:

CatalogFilterRequest
~~~~~~~~~~~~~~~~~~~~

Source file: `stream/catalog_filter.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/catalog_filter.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - column_indices
     - int32
     - repeated
     - 
   * - filter_configs
     - :carta:refc:`FilterConfig`
     - repeated
     - 
   * - subset_data_size
     - sfixed32
     - 
     - 
   * - subset_start_index
     - sfixed32
     - 
     - 
   * - image_bounds
     - :carta:refc:`CatalogImageBounds`
     - 
     - 
   * - image_file_id
     - sfixed32
     - 
     - 
   * - region_id
     - sfixed32
     - 
     - 
   * - sort_column
     - string
     - 
     - 
   * - sorting_type
     - :carta:refc:`SortingType`
     - 
     - 

.. carta:class:: carta-b2f catalogfilterresponse

.. _catalogfilterresponse:

CatalogFilterResponse
~~~~~~~~~~~~~~~~~~~~~

Source file: `stream/catalog_filter.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/catalog_filter.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - image_file_id
     - sfixed32
     - 
     - 
   * - region_id
     - sfixed32
     - 
     - 
   * - columns
     - map<key: fixed32, value: :carta:refc:`ColumnData`>
     - repeated
     - 
   * - subset_data_size
     - sfixed32
     - 
     - 
   * - subset_end_index
     - sfixed32
     - 
     - 
   * - progress
     - float
     - 
     - 
   * - filter_data_size
     - sfixed32
     - 
     - 
   * - request_end_index
     - sfixed32
     - 
     - 

.. carta:class:: carta-f2b cataloglistrequest

.. _cataloglistrequest:

CatalogListRequest
~~~~~~~~~~~~~~~~~~

Source file: `request/catalog_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_list.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 
   * - filter_mode
     - :carta:refc:`FileListFilterMode`
     - 
     - Filter mode to use when showing the file list

.. carta:class:: carta-b2f cataloglistresponse

.. _cataloglistresponse:

CatalogListResponse
~~~~~~~~~~~~~~~~~~~

Source file: `request/catalog_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/catalog_list.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - directory
     - string
     - 
     - 
   * - parent
     - string
     - 
     - 
   * - files
     - :carta:refc:`CatalogFileInfo`
     - repeated
     - 
   * - subdirectories
     - :carta:refc:`DirectoryInfo`
     - repeated
     - 
   * - cancel
     - bool
     - 
     - 

.. carta:class:: carta-f2b closecatalogfile

.. _closecatalogfile:

CloseCatalogFile
~~~~~~~~~~~~~~~~

Source file: `control/open_catalog_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_catalog_file.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 

.. carta:class:: carta-f2b closefile

.. _closefile:

CloseFile
~~~~~~~~~

Source file: `control/close_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/close_file.proto>`_

CLOSE_FILE:
Instructs the backend to close a file with a given file ID

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which "file" slot to close

.. carta:class:: carta-f2b closepvpreview

.. _closepvpreview:

ClosePvPreview
~~~~~~~~~~~~~~

Source file: `control/stop_pv_calc.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/stop_pv_calc.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - preview_id
     - sfixed32
     - 
     - Close the PV preview for the preview viewer id

.. carta:class:: carta-f2b concatstokesfiles

.. _concatstokesfiles:

ConcatStokesFiles
~~~~~~~~~~~~~~~~~

Source file: `control/concat_stokes_files.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/concat_stokes_files.proto>`_

CONCAT_STOKES_FILES:
Requests to concatenate individual stokes images as one and open it.
Backend responds with :carta:refc:`CONCAT_STOKES_FILES_ACK`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - stokes_files
     - :carta:refc:`StokesFile`
     - repeated
     - Stokes files to be concatenated
   * - file_id
     - sfixed32
     - 
     - File ID for the concatenate image
   * - render_mode
     - :carta:refc:`RenderMode`
     - 
     - The render mode to use. Additional modes will be added in subsequent versions.

.. carta:class:: carta-b2f concatstokesfilesack

.. _concatstokesfilesack:

ConcatStokesFilesAck
~~~~~~~~~~~~~~~~~~~~

Source file: `control/concat_stokes_files.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/concat_stokes_files.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Concatenation is successful or not
   * - message
     - string
     - 
     - Error message if not successful
   * - open_file_ack
     - :carta:refc:`OpenFileAck`
     - 
     - Open file acknowledgement for the concatenate file

.. carta:class:: carta-b2f contourimagedata

.. _contourimagedata:

ContourImageData
~~~~~~~~~~~~~~~~

Source file: `stream/contour_image.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/contour_image.proto>`_

CONTOUR_IMAGE_DATA:
Data for an image rendered in contour mode.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the contour image corresponds to
   * - reference_file_id
     - fixed32
     - 
     - The file ID of the reference image that the contour vertices are mapped to
   * - image_bounds
     - :carta:refc:`ImageBounds`
     - 
     - The bounding box in the XY plane corresponding to the image data in pixel coordinates
   * - channel
     - sfixed32
     - 
     - The image channel used to generate the contours
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the contours
   * - contour_sets
     - :carta:refc:`ContourSet`
     - repeated
     - Each contour set consists of the contour level value, as well as a list of coordinates. The start_indices list is used to determine how to subdivide the coordinates list into separate poly-lines when rendering.
   * - progress
     - double
     - 
     - Progress of the contour sets being sent. If this is zero, the message is assumed to contain the entire contour sets

.. carta:class:: carta-b2f contourset

.. _contourset:

ContourSet
~~~~~~~~~~

Source file: `stream/contour_image.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/contour_image.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - level
     - double
     - 
     - 
   * - decimation_factor
     - int32
     - 
     - 
   * - raw_coordinates
     - bytes
     - 
     - 
   * - raw_start_indices
     - bytes
     - 
     - 
   * - uncompressed_coordinates_size
     - int32
     - 
     - 

.. carta:class:: carta-b2f errordata

.. _errordata:

ErrorData
~~~~~~~~~

Source file: `stream/error.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/error.proto>`_

ERROR_DATA:
Stream of error/warning/info data. This stream is used to present the frontend with additional information on
the state of the backend, and is not used in place of returning success=false on requests or commands.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - severity
     - :carta:refc:`ErrorSeverity`
     - 
     - The severity of the error. Critical errors are reserved for errors that would normally require the user to restart the program or reload the page
   * - tags
     - string
     - repeated
     - A list of strings describing the error type, that the frontend can interpret and react to. For example, “file_io” or “memory”.
   * - message
     - string
     - 
     - The error message
   * - data
     - string
     - 
     - Accompanying error data. For example, if an error has the “file_io” tag, the frontend would expect the data field to contain the file ID of the offending file.

.. carta:class:: carta-f2b exportregion

.. _exportregion:

ExportRegion
~~~~~~~~~~~~

Source file: `control/export_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/export_region.proto>`_

EXPORT_REGION:
Requests exporting the specified regions to a file on the server.
If directory and file are blank, return file contents for export on client.
Backend responds with  :carta:refc:`EXPORT_REGION_ACK`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - type
     - :carta:refc:`FileType`
     - 
     - Required file type
   * - coord_type
     - :carta:refc:`CoordinateType`
     - 
     - Required coordinate type pixel/world
   * - file_id
     - sfixed32
     - 
     - File id for the coordinate system to use
   * - region_styles
     - map<key: sfixed32, value: :carta:refc:`RegionStyle`>
     - repeated
     - Region ids and style params to export
   * - directory
     - string
     - 
     - Optional directory name of server file
   * - file
     - string
     - 
     - Optional file name of server file

.. carta:class:: carta-b2f exportregionack

.. _exportregionack:

ExportRegionAck
~~~~~~~~~~~~~~~

Source file: `control/export_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/export_region.proto>`_

EXPORT_REGION_ACK
Response for :carta:refc:`EXPORT_REGION` to indicate success and file contents if on client.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:refc:`EXPORT_REGION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - contents
     - string
     - repeated
     - File contents for client export (one line per string)

.. carta:class:: carta-f2b fileinforequest

.. _fileinforequest:

FileInfoRequest
~~~~~~~~~~~~~~~

Source file: `request/file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_info.proto>`_

FILE_INFO_REQUEST:
Requests the file info for a specific file.
Backend responds with :carta:refc:`FILE_INFO_RESPONSE`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - file
     - string
     - 
     - Required file name
   * - hdu
     - string
     - 
     - Required HDU name (if applicable). If left empty, the first HDU is selected
   * - support_aips_beam
     - bool
     - 
     - Defines whether to support AIPS beam in FITS history headers

.. carta:class:: carta-b2f fileinforesponse

.. _fileinforesponse:

FileInfoResponse
~~~~~~~~~~~~~~~~

Source file: `request/file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_info.proto>`_

FILE_INFO_RESPONSE
Response for :carta:refc:`FILE_INFO_REQUEST`.
Gives information on the requested file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the :carta:refc:`FILE_INFO_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - file_info
     - :carta:refc:`FileInfo`
     - 
     - Basic file info (type, size)
   * - file_info_extended
     - map<key: string, value: :carta:refc:`FileInfoExtended`>
     - repeated
     - Extended file info (WCS, header info)

.. carta:class:: carta-f2b filelistrequest

.. _filelistrequest:

FileListRequest
~~~~~~~~~~~~~~~

Source file: `request/file_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_list.proto>`_

FILE_LIST_REQUEST:
Requests the list of available files for a given directory.
Backend responds with :carta:refc:`FILE_LIST_RESPONSE`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - filter_mode
     - :carta:refc:`FileListFilterMode`
     - 
     - Filter mode to use when showing the file list

.. carta:class:: carta-b2f filelistresponse

.. _filelistresponse:

FileListResponse
~~~~~~~~~~~~~~~~

Source file: `request/file_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_list.proto>`_

FILE_LIST_RESPONSE
Response for :carta:refc:`FILE_LIST_REQUEST`.
Gives a list of available files (and their types), as well as subdirectories

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the :carta:refc:`FILE_LIST_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - directory
     - string
     - 
     - Directory of listing
   * - parent
     - string
     - 
     - Directory parent (null/empty if top-level)
   * - files
     - :carta:refc:`FileInfo`
     - repeated
     - List of available image files, with file type information and size information.
   * - subdirectories
     - :carta:refc:`DirectoryInfo`
     - repeated
     - List of available subdirectories, with number of items and modified date
   * - cancel
     - bool
     - 
     - 

.. carta:class:: carta-b2f fittingprogress

.. _fittingprogress:

FittingProgress
~~~~~~~~~~~~~~~

Source file: `request/fitting_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/fitting_request.proto>`_

FITTING_PROGRESS:
Updates the progress of the requested fitting.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - File ID of the image to be fit
   * - progress
     - float
     - 
     - Progess of the fitting procedure, ranging from 0 to 1

.. carta:class:: carta-f2b fittingrequest

.. _fittingrequest:

FittingRequest
~~~~~~~~~~~~~~

Source file: `request/fitting_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/fitting_request.proto>`_

FITTING_REQUEST:
Requests 2D Gaussian image fitting with given initial values.
Backend responds with :carta:refc:`FITTING_RESPONSE`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - File ID of the image to be fit
   * - initial_values
     - :carta:refc:`GaussianComponent`
     - repeated
     - Initial values for 2D Gaussian fitting
   * - fixed_params
     - bool
     - repeated
     - Whether each parameter (in the order of center, amplitude, FWHM, and p.a., and with background offset at the end) should be fixed when fitting
   * - region_id
     - sfixed32
     - 
     - Region ID. Apply field of view if the id is 0; apply the entire image if the id is -1
   * - fov_info
     - :carta:refc:`RegionInfo`
     - 
     - Field of view parameters
   * - create_model_image
     - bool
     - 
     - Whether to create a model image of the fitting result
   * - create_residual_image
     - bool
     - 
     - Whether to create a residual image of the fitting result
   * - offset
     - double
     - 
     - Background level offset
   * - solver
     - :carta:refc:`FittingSolverType`
     - 
     - Solver of the linear least squares system in the fitting

.. carta:class:: carta-b2f fittingresponse

.. _fittingresponse:

FittingResponse
~~~~~~~~~~~~~~~

Source file: `request/fitting_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/fitting_request.proto>`_

FITTING_RESPONSE:
Response for :carta:refc:`FITTING_REQUEST`.
Gives results and log of 2D Gaussian image fitting.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:refc:`FITTING_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - result_values
     - :carta:refc:`GaussianComponent`
     - repeated
     - Fitting result: values of the fitted parameters
   * - result_errors
     - :carta:refc:`GaussianComponent`
     - repeated
     - Fitting result: errors of the fitted parameters
   * - log
     - string
     - 
     - Fitting log
   * - model_image
     - :carta:refc:`OpenFileAck`
     - 
     - Fitting result: model image
   * - residual_image
     - :carta:refc:`OpenFileAck`
     - 
     - Fitting result: residual image
   * - offset_value
     - double
     - 
     - Fitting result: background level offset
   * - offset_error
     - double
     - 
     - Fitting result: error of background level offset
   * - integrated_flux_values
     - double
     - repeated
     - Fitting result: values of integrated flux of each component
   * - integrated_flux_errors
     - double
     - repeated
     - Fitting result: errors of integrated flux of each component

.. carta:class:: carta-f2b imageproperties

.. _imageproperties:

ImageProperties
~~~~~~~~~~~~~~~

Source file: `control/resume_session.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/resume_session.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 
   * - file
     - string
     - 
     - 
   * - lel_expr
     - bool
     - 
     - 
   * - hdu
     - string
     - 
     - 
   * - file_id
     - sfixed32
     - 
     - 
   * - render_mode
     - :carta:refc:`RenderMode`
     - 
     - 
   * - channel
     - sfixed32
     - 
     - 
   * - stokes
     - sfixed32
     - 
     - 
   * - regions
     - map<key: sfixed32, value: :carta:refc:`RegionInfo`>
     - repeated
     - 
   * - contour_settings
     - :carta:refc:`SetContourParameters`
     - 
     - 
   * - stokes_files
     - :carta:refc:`StokesFile`
     - repeated
     - 
   * - support_aips_beam
     - bool
     - 
     - 

.. carta:class:: carta-f2b importregion

.. _importregion:

ImportRegion
~~~~~~~~~~~~

Source file: `control/import_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/import_region.proto>`_

IMPORT_REGION:
Requests the opening and applying of a specific region file.
Backend responds with  :carta:refc:`IMPORT_REGION_ACK`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - group_id
     - sfixed32
     - 
     - Required WCS group id (may be a single file id)
   * - type
     - :carta:refc:`FileType`
     - 
     - Required file type
   * - directory
     - string
     - 
     - Optional directory name of server file
   * - file
     - string
     - 
     - Optional file name of server file
   * - contents
     - string
     - repeated
     - Optional file contents of client file (1 line per string)

.. carta:class:: carta-b2f importregionack

.. _importregionack:

ImportRegionAck
~~~~~~~~~~~~~~~

Source file: `control/import_region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/import_region.proto>`_

IMPORT_REGION_ACK
Response for :carta:refc:`IMPORT_REGION`. Also supplies region properties

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:refc:`IMPORT_REGION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - regions
     - map<key: sfixed32, value: :carta:refc:`RegionInfo`>
     - repeated
     - Map region id to parameters
   * - region_styles
     - map<key: sfixed32, value: :carta:refc:`RegionStyle`>
     - repeated
     - Map region id to style parameters

.. carta:class:: carta-b2f momentprogress

.. _momentprogress:

MomentProgress
~~~~~~~~~~~~~~

Source file: `request/moment_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/moment_request.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - progress
     - float
     - 
     - 

.. carta:class:: carta-f2b momentrequest

.. _momentrequest:

MomentRequest
~~~~~~~~~~~~~

Source file: `request/moment_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/moment_request.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - moments
     - :carta:refc:`Moment`
     - repeated
     - 
   * - axis
     - :carta:refc:`MomentAxis`
     - 
     - 
   * - region_id
     - sfixed32
     - 
     - 
   * - spectral_range
     - :carta:refc:`IntBounds`
     - 
     - 
   * - mask
     - :carta:refc:`MomentMask`
     - 
     - 
   * - pixel_range
     - :carta:refc:`FloatBounds`
     - 
     - 
   * - keep
     - bool
     - 
     - 

.. carta:class:: carta-b2f momentresponse

.. _momentresponse:

MomentResponse
~~~~~~~~~~~~~~

Source file: `request/moment_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/moment_request.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - open_file_acks
     - :carta:refc:`OpenFileAck`
     - repeated
     - 
   * - cancel
     - bool
     - 
     - 

.. carta:class:: carta-f2b opencatalogfile

.. _opencatalogfile:

OpenCatalogFile
~~~~~~~~~~~~~~~

Source file: `control/open_catalog_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_catalog_file.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - 
   * - name
     - string
     - 
     - 
   * - file_id
     - sfixed32
     - 
     - 
   * - preview_data_size
     - sfixed32
     - 
     - 

.. carta:class:: carta-b2f opencatalogfileack

.. _opencatalogfileack:

OpenCatalogFileAck
~~~~~~~~~~~~~~~~~~

Source file: `control/open_catalog_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_catalog_file.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 
   * - file_id
     - sfixed32
     - 
     - 
   * - file_info
     - :carta:refc:`CatalogFileInfo`
     - 
     - 
   * - data_size
     - sfixed32
     - 
     - 
   * - headers
     - :carta:refc:`CatalogHeader`
     - repeated
     - 
   * - preview_data
     - map<key: fixed32, value: :carta:refc:`ColumnData`>
     - repeated
     - 

.. carta:class:: carta-f2b openfile

.. _openfile:

OpenFile
~~~~~~~~

Source file: `control/open_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_file.proto>`_

OPEN_FILE:
Requests the opening of a specific file.
Backend responds with  :carta:refc:`OPEN_FILE_ACK`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - file
     - string
     - 
     - File name or LEL expression
   * - hdu
     - string
     - 
     - Which HDU to load (if applicable). If left blank, the first HDU will be used
   * - file_id
     - sfixed32
     - 
     - Which "file" slot to load the file into (when viewing multiple files)
   * - render_mode
     - :carta:refc:`RenderMode`
     - 
     - The render mode to use. Additional modes will be added in subsequent versions.
   * - lel_expr
     - bool
     - 
     - Defines whether file is LEL expression
   * - support_aips_beam
     - bool
     - 
     - Defines whether to support AIPS beam in FITS history headers

.. carta:class:: carta-b2f openfileack

.. _openfileack:

OpenFileAck
~~~~~~~~~~~

Source file: `control/open_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/open_file.proto>`_

OPEN_FILE_ACK
Response for :carta:refc:`OPEN_FILE`. Also supplies file information

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:refc:`OPEN_FILE` was successful
   * - file_id
     - sfixed32
     - 
     - Which file slot the file was loaded into (when viewing multiple files)
   * - message
     - string
     - 
     - Error message (if applicable)
   * - file_info
     - :carta:refc:`FileInfo`
     - 
     - Basic file info (type, size)
   * - file_info_extended
     - :carta:refc:`FileInfoExtended`
     - 
     - Extended file info (WCS, header info)
   * - file_feature_flags
     - fixed32
     - 
     - Optional bitflags specifying feature flags of the file being opened.
   * - beam_table
     - :carta:refc:`Beam`
     - repeated
     - :carta:refc:`Beam` table for multiple-beam images

.. carta:class:: carta-b2f pvpreviewdata

.. _pvpreviewdata:

PvPreviewData
~~~~~~~~~~~~~

Source file: `stream/pv_preview.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/pv_preview.proto>`_

Data stream for PV preview image

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - preview_id
     - sfixed32
     - 
     - Preview ID for the PV preview viewer
   * - image_info
     - :carta:refc:`FileInfoExtended`
     - 
     - Image extended file info
   * - image_data
     - bytes
     - 
     - Image data. For uncompressed data, this is converted into FP32, while for compressed data, this is passed to the compression library for decompression.
   * - nan_encodings
     - bytes
     - 
     - Run-length encodings of NaN values used to restore the NaN values after decompression.
   * - width
     - sfixed32
     - 
     - Dimensions of data
   * - height
     - sfixed32
     - 
     - 
   * - compression_type
     - :carta:refc:`CompressionType`
     - 
     - The compression algorithm used
   * - compression_quality
     - float
     - 
     - Compression quality switch
   * - histogram_bounds
     - :carta:refc:`FloatBounds`
     - 
     - :carta:refc:`Histogram` min/max, for rendering
   * - histogram
     - :carta:refc:`Histogram`
     - 
     - :carta:refc:`Histogram`, to tune rendering

.. carta:class:: carta-b2f pvprogress

.. _pvprogress:

PvProgress
~~~~~~~~~~

Source file: `request/pv_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/pv_request.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - File ID of the source image for the PV generator
   * - preview_id
     - sfixed32
     - 
     - Preview ID of the PV preview viewer
   * - progress
     - float
     - 
     - Progress indicator, ranging from 0 to 1

.. carta:class:: carta-f2b pvrequest

.. _pvrequest:

PvRequest
~~~~~~~~~

Source file: `request/pv_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/pv_request.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - File ID of the source image
   * - region_id
     - sfixed32
     - 
     - Region ID of the PV cut in the source image
   * - width
     - sfixed32
     - 
     - Averaging width along PV cut
   * - spectral_range
     - :carta:refc:`IntBounds`
     - 
     - Range of channels to be used in velocity axis
   * - reverse
     - bool
     - 
     - Flag whether to generate [Spatial, Spectral] image or reverse
   * - keep
     - bool
     - 
     - Flag whether to keep or replace previously-generated images
   * - preview_settings
     - :carta:refc:`PvPreviewSettings`
     - 
     - Parameters for preview mode

.. carta:class:: carta-b2f pvresponse

.. _pvresponse:

PvResponse
~~~~~~~~~~

Source file: `request/pv_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/pv_request.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:refc:`PV_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - open_file_ack
     - :carta:refc:`OpenFileAck`
     - 
     - PV generator result: generated PV image
   * - preview_data
     - :carta:refc:`PvPreviewData`
     - 
     - PV preview result: generated PV image
   * - cancel
     - bool
     - 
     - Defines whether :carta:refc:`PV_REQUEST` was canceled

.. carta:class:: carta-b2f rastertiledata

.. _rastertiledata:

RasterTileData
~~~~~~~~~~~~~~

Source file: `stream/raster_tile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/raster_tile.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the raster image corresponds to
   * - channel
     - sfixed32
     - 
     - The image channel (z-coordinate)
   * - stokes
     - sfixed32
     - 
     - The image stokes coordinate
   * - compression_type
     - :carta:refc:`CompressionType`
     - 
     - The compression algorithm used.
   * - compression_quality
     - float
     - 
     - Compression quality switch
   * - sync_id
     - sfixed32
     - 
     - The ID of the sync sequence
   * - tile_count
     - sfixed32
     - 
     - The number of tiles in a sync group
   * - animation_id
     - sfixed32
     - 
     - The ID of the animation (if any)
   * - tiles
     - :carta:refc:`TileData`
     - repeated
     - List of tile data

.. carta:class:: carta-b2f rastertilesync

.. _rastertilesync:

RasterTileSync
~~~~~~~~~~~~~~

Source file: `stream/raster_tile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/raster_tile.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the raster image corresponds to
   * - channel
     - sfixed32
     - 
     - The image channel (z-coordinate)
   * - stokes
     - sfixed32
     - 
     - The image stokes coordinate
   * - sync_id
     - sfixed32
     - 
     - The ID of the sync sequence
   * - animation_id
     - sfixed32
     - 
     - The ID of the animation (if any)
   * - end_sync
     - bool
     - 
     - Is this a start or end sync message?

.. carta:class:: carta-f2b regionfileinforequest

.. _regionfileinforequest:

RegionFileInfoRequest
~~~~~~~~~~~~~~~~~~~~~

Source file: `request/region_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_file_info.proto>`_

REGION_FILE_INFO_REQUEST:
Requests contents for a specific region file on the server
Backend responds with :carta:refc:`REGION_FILE_INFO_RESPONSE`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - file
     - string
     - 
     - Required file name

.. carta:class:: carta-b2f regionfileinforesponse

.. _regionfileinforesponse:

RegionFileInfoResponse
~~~~~~~~~~~~~~~~~~~~~~

Source file: `request/region_file_info.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_file_info.proto>`_

REGION_FILE_INFO_RESPONSE
Response for :carta:refc:`REGION_FILE_INFO_REQUEST`.
Gives information on the requested file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the REGION_INFO_REQUEST was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - file_info
     - :carta:refc:`FileInfo`
     - 
     - Basic info about region file
   * - contents
     - string
     - repeated
     - Contents of file; each string is a line

.. carta:class:: carta-b2f regionhistogramdata

.. _regionhistogramdata:

RegionHistogramData
~~~~~~~~~~~~~~~~~~~

Source file: `stream/region_histogram.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/region_histogram.proto>`_

REGION_HISTOGRAM_DATA:
Stats data for a specific region

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the histogram corresponds to
   * - region_id
     - sfixed32
     - 
     - The region ID corresponding to the histogram. If the histogram corresponds to the entire current 2D image, the region ID has a value of -1.
   * - channel
     - sfixed32
     - 
     - The image channel corresponding to the histogram
   * - stokes
     - sfixed32
     - 
     - The image stokes corresponding to the histogram
   * - histograms
     - :carta:refc:`Histogram`
     - 
     - Array of histograms of the current file, region, channel and stokes
   * - progress
     - float
     - 
     - Progress indicator, in the case of partial histogram results being sent
   * - config
     - :carta:refc:`HistogramConfig`
     - 
     - :carta:refc:`Histogram` configuration from the frontend

.. carta:class:: carta-f2b regionlistrequest

.. _regionlistrequest:

RegionListRequest
~~~~~~~~~~~~~~~~~

Source file: `request/region_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_list.proto>`_

REGION_LIST_REQUEST:
Requests the list of available region files for a given directory.
Backend responds with :carta:refc:`REGION_LIST_RESPONSE`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - filter_mode
     - :carta:refc:`FileListFilterMode`
     - 
     - Filter mode to use when showing the file list

.. carta:class:: carta-b2f regionlistresponse

.. _regionlistresponse:

RegionListResponse
~~~~~~~~~~~~~~~~~~

Source file: `request/region_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/region_list.proto>`_

REGION_LIST_RESPONSE
Response for :carta:refc:`REGION_LIST_REQUEST`.
Gives a list of available region files (and their types), as well as subdirectories

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether the :carta:refc:`REGION_LIST_REQUEST` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - directory
     - string
     - 
     - Directory of listing
   * - parent
     - string
     - 
     - Directory parent (null/empty if top-level)
   * - files
     - :carta:refc:`FileInfo`
     - repeated
     - List of available image files, with file type information and size information.
   * - subdirectories
     - :carta:refc:`DirectoryInfo`
     - repeated
     - List of available subdirectories, with number of items and modified date
   * - cancel
     - bool
     - 
     - 

.. carta:class:: carta-b2f regionstatsdata

.. _regionstatsdata:

RegionStatsData
~~~~~~~~~~~~~~~

Source file: `stream/region_stats.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/region_stats.proto>`_

REGION_STATS_DATA:
Stats data for a specific region

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the profile corresponds to
   * - region_id
     - sfixed32
     - 
     - The region_id corresponding to this profile. If the statistics data corresponds to the entire current 2D image, the region ID has a value of -1.
   * - channel
     - sfixed32
     - 
     - The image channel used to generate the statistics
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the profiles
   * - statistics
     - :carta:refc:`StatisticsValue`
     - repeated
     - Array of statistics values, each corresponding to a particular measurement, such as max, min, mean, etc

.. carta:class:: carta-f2b registerviewer

.. _registerviewer:

RegisterViewer
~~~~~~~~~~~~~~

Source file: `control/register_viewer.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/register_viewer.proto>`_

REGISTER_VIEWER:
Registers the viewer with the backend.
Responds with :carta:refc:`REGISTER_VIEWER_ACK`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - session_id
     - fixed32
     - 
     - Unique session ID parameter (can be generated using UUID libraries). Passing in an existing session ID can be used for resuming sessions
   * - api_key
     - string
     - 
     - Optional user-specific API key to be used for basic authentication. Could be an encrypted JWT for secure authentication.
   * - client_feature_flags
     - fixed32
     - 
     - Optional feature bitflag specifying client-side feature set

.. carta:class:: carta-b2f registerviewerack

.. _registerviewerack:

RegisterViewerAck
~~~~~~~~~~~~~~~~~

Source file: `control/register_viewer.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/register_viewer.proto>`_

REGISTER_VIEWER_ACK
Acknowledgement response for :carta:refc:`REGISTER_VIEWER`.
Informs the frontend whether the session was correctly.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - session_id
     - fixed32
     - 
     - Unique session ID
   * - success
     - bool
     - 
     - Defines whether the :carta:refc:`REGISTER_VIEWER` command was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - session_type
     - :carta:refc:`SessionType`
     - 
     - Defines the type of session established
   * - server_feature_flags
     - fixed32
     - 
     - Optional feature bitflag specifying server-side feature set
   * - user_preferences
     - map<key: string, value: string>
     - repeated
     - Map of user preferences retrieved from the server database. If this is empty and the server does not have the USER_PREFERENCES feature flag set, then the user preferences are read from localStorage instead.
   * - user_layouts
     - map<key: string, value: string>
     - repeated
     - Map of user layouts retrieved from the server database
   * - platform_strings
     - map<key: string, value: string>
     - repeated
     - Map of server-generated platform information strings

.. carta:class:: carta-f2b removeregion

.. _removeregion:

RemoveRegion
~~~~~~~~~~~~

Source file: `control/region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region.proto>`_

REMOVE_REGION:
Removes a region

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - region_id
     - sfixed32
     - 
     - Unique region ID of the region to be removed

.. carta:class:: carta-f2b removerequiredtiles

.. _removerequiredtiles:

RemoveRequiredTiles
~~~~~~~~~~~~~~~~~~~

Source file: `control/tiles.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/tiles.proto>`_

REMOVE_REQUIRED_TILES
Provides a list of tiles that are required for the specified file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the view corresponds to
   * - tiles
     - sfixed32
     - repeated
     - The list of tiles required, in encoded coordinate

.. carta:class:: carta-f2b resumesession

.. _resumesession:

ResumeSession
~~~~~~~~~~~~~

Source file: `control/resume_session.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/resume_session.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - images
     - :carta:refc:`ImageProperties`
     - repeated
     - 
   * - catalog_files
     - :carta:refc:`OpenCatalogFile`
     - repeated
     - 

.. carta:class:: carta-b2f resumesessionack

.. _resumesessionack:

ResumeSessionAck
~~~~~~~~~~~~~~~~

Source file: `control/resume_session.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/resume_session.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 

.. carta:class:: carta-f2b savefile

.. _savefile:

SaveFile
~~~~~~~~

Source file: `request/save_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/save_file.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - output_file_directory
     - string
     - 
     - 
   * - output_file_name
     - string
     - 
     - 
   * - output_file_type
     - :carta:refc:`FileType`
     - 
     - The format of a new image file
   * - region_id
     - sfixed32
     - 
     - 
   * - channels
     - sfixed32
     - repeated
     - Set image channels: [start, end, stride]
   * - stokes
     - sfixed32
     - repeated
     - Set image stokes: [start, end, stride]
   * - keep_degenerate
     - bool
     - 
     - 
   * - rest_freq
     - double
     - 
     - Set the rest frequency (Hz) of the image

.. carta:class:: carta-f2b savefileack

.. _savefileack:

SaveFileAck
~~~~~~~~~~~

Source file: `request/save_file.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/save_file.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - 
   * - success
     - bool
     - 
     - 
   * - message
     - string
     - 
     - 

.. carta:class:: carta-f2b scriptingrequest

.. _scriptingrequest:

ScriptingRequest
~~~~~~~~~~~~~~~~

Source file: `request/scripting.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/scripting.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - scripting_request_id
     - sfixed32
     - 
     - Used to connect a single scripting request to its response
   * - target
     - string
     - 
     - the path of the target object. e.g. activeFrame.renderConfig
   * - action
     - string
     - 
     - the name of the function to call. e.g. setColorMap
   * - parameters
     - string
     - 
     - JSON array of parameters. e.g. '["viridis"]'
   * - async
     - bool
     - 
     - flag indicating whether the frontend should execute this asynchronously, or only return once the call is complete
   * - return_path
     - string
     - 
     - optional string indicating the path of the response sub-object to return. If this is empty, the entire response will be returned.

.. carta:class:: carta-b2f scriptingresponse

.. _scriptingresponse:

ScriptingResponse
~~~~~~~~~~~~~~~~~

Source file: `request/scripting.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/scripting.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - scripting_request_id
     - sfixed32
     - 
     - should match the incoming request ID
   * - success
     - bool
     - 
     - indicates whether the call was correctly executed
   * - message
     - string
     - 
     - optional error message
   * - response
     - string
     - 
     - JSON-parsable response. e.g. "true", or the base64-encoded string

.. carta:class:: carta-f2b setcontourparameters

.. _setcontourparameters:

SetContourParameters
~~~~~~~~~~~~~~~~~~~~

Source file: `control/contour.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/contour.proto>`_

SET_CONTOUR_PARAMETERS
Sets the contour parameters for a file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - fixed32
     - 
     - The file ID that the contour corresponds to
   * - reference_file_id
     - fixed32
     - 
     - The file ID of the reference image that the contour vertices should be mapped to
   * - image_bounds
     - :carta:refc:`ImageBounds`
     - 
     - The XY bounds corresponding to the image data in pixel coordinates
   * - levels
     - double
     - repeated
     - Contour levels
   * - smoothing_mode
     - :carta:refc:`SmoothingMode`
     - 
     - Pre-contouring smoothing mode
   * - smoothing_factor
     - int32
     - 
     - Contour smoothness factor. For block averaging, this is the block width For Gaussian smoothing, this defines both the Gaussian width, and the kernel size
   * - decimation_factor
     - int32
     - 
     - Decimation factor, indicates to what 1/Nth of a pixel the contour vertices should be rounded to
   * - compression_level
     - int32
     - 
     - Zstd compression level
   * - contour_chunk_size
     - int32
     - 
     - Size of contour chunks, in number of vertices. If this is set to zero, partial contour results are not used

.. carta:class:: carta-f2b setcursor

.. _setcursor:

SetCursor
~~~~~~~~~

Source file: `control/set_cursor.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/set_cursor.proto>`_

SET_CURSOR:
Sets the current cursor position in image space coordinates.
The cursor defines a special case of a region, with a single control point.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the cursor is moving over
   * - point
     - :carta:refc:`Point`
     - 
     - XY-coordinates of cursor in image space
   * - spatial_requirements
     - :carta:refc:`SetSpatialRequirements`
     - 
     - Optional accompanying spatial requirements message to be processed prior to cursor update

.. carta:class:: carta-f2b sethistogramrequirements

.. _sethistogramrequirements:

SetHistogramRequirements
~~~~~~~~~~~~~~~~~~~~~~~~

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_HISTOGRAM_REQUIREMENTS:
Sets which histogram data needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of -1 is given, this corresponds to the entire 2D image.
   * - histograms
     - :carta:refc:`HistogramConfig`
     - repeated
     - List of required histograms, along with the number of bins. If the channel is -1, the current channel is used. If the channel is -2, the histogram is constructed over all channels. If the number of bins is less than zero, an automatic bin size is used, based on the number of values.

.. carta:class:: carta-f2b setimagechannels

.. _setimagechannels:

SetImageChannels
~~~~~~~~~~~~~~~~

Source file: `control/set_image_channels.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/set_image_channels.proto>`_

SET_IMAGE_CHANNELS
Sets the current image channel and Stokes parameter

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the view corresponds to
   * - channel
     - sfixed32
     - 
     - The image channel (Z-coordinate)
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter
   * - required_tiles
     - :carta:refc:`AddRequiredTiles`
     - 
     - Required tiles when changing channels

.. carta:class:: carta-f2b setregion

.. _setregion:

SetRegion
~~~~~~~~~

Source file: `control/region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region.proto>`_

SET_REGION:
Creates or updates a region. Backend responds with :carta:refc:`SET_REGION_ACK`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - File slot of the reference image
   * - region_id
     - sfixed32
     - 
     - Unique region ID. <=0 if a new region is being created.
   * - region_info
     - :carta:refc:`RegionInfo`
     - 
     - Region parameters
   * - preview_region
     - bool
     - 
     - Update region for pv preview only

.. carta:class:: carta-b2f setregionack

.. _setregionack:

SetRegionAck
~~~~~~~~~~~~

Source file: `control/region.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region.proto>`_

SET_REGION_ACK:
Response for :carta:refc:`SET_REGION`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:refc:`SET_REGION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - region_id
     - sfixed32
     - 
     - The unique region ID. If the region is updated, this will be the same as the region ID specified in :carta:refc:`SET_REGION`. If  a new region is being created, the ID of the new region will be passed back.

.. carta:class:: carta-f2b setspatialrequirements

.. _setspatialrequirements:

SetSpatialRequirements
~~~~~~~~~~~~~~~~~~~~~~

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_SPATIAL_REQUIREMENTS:
Sets which information needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of 0 is given, this corresponds to the point region defined by the cursor position.
   * - spatial_profiles
     - :carta:refc:`SpatialConfig`
     - repeated
     - List of spatial profiles needed.

.. carta:class:: carta-f2b setspectralrequirements

.. _setspectralrequirements:

SetSpectralRequirements
~~~~~~~~~~~~~~~~~~~~~~~

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_SPECTRAL_REQUIREMENTS:
Sets which spectral profile data needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of 0 is given, this corresponds to the point region defined by the cursor position.
   * - spectral_profiles
     - :carta:refc:`SpectralConfig`
     - repeated
     - List of spectral profiles needed, along with which stats types are needed for each profile.

.. carta:class:: carta-f2b setstatsrequirements

.. _setstatsrequirements:

SetStatsRequirements
~~~~~~~~~~~~~~~~~~~~

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_

SET_STATS_REQUIREMENTS:
Sets which stats data needs to be streamed to the frontend when the region is updated

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the requirements describe
   * - region_id
     - sfixed32
     - 
     - ID of the region that is having requirements defined. If a region ID of -1 is given, this corresponds to the entire 2D image.
   * - stats_configs
     - :carta:refc:`StatsConfig`
     - repeated
     - List of required stats

.. carta:class:: carta-f2b setvectoroverlayparameters

.. _setvectoroverlayparameters:

SetVectorOverlayParameters
~~~~~~~~~~~~~~~~~~~~~~~~~~

Source file: `control/vector_overlay.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/vector_overlay.proto>`_

SET_VECTOR_OVERLAY_PARAMETERS
Sets the overlay parameters for a file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - fixed32
     - 
     - The file ID that the overlay corresponds to
   * - image_bounds
     - :carta:refc:`ImageBounds`
     - 
     - The XY bounds corresponding to the image data in pixel coordinates. Currently unused
   * - smoothing_factor
     - fixed32
     - 
     - Block smoothing factor to use. Must be an even integer, corresponds to the ``mip`` coordinate.
   * - fractional
     - bool
     - 
     - Whether to use fractional polarization intensity
   * - threshold
     - double
     - 
     - Threshold value to use. If this is set to NaN, no threshold is applied.
   * - debiasing
     - bool
     - 
     - Whether to use debiasing
   * - q_error
     - double
     - 
     - Stokes Q error when debiasing
   * - u_error
     - double
     - 
     - Stokes U error when debiasing
   * - stokes_intensity
     - sfixed32
     - 
     - The Stokes coordinate to use when generating vector intensity. If this is < 0, uniform intensity is used. If both this and ``stokes_angle`` are < 0, the overlay requirement is cleared
   * - stokes_angle
     - sfixed32
     - 
     - The Stokes coordinate to use when generating vector angle. If this is < 0, uniform angle is used (e.g. when rendering block markers)
   * - compression_type
     - :carta:refc:`CompressionType`
     - 
     - The compression algorithm to use.
   * - compression_quality
     - float
     - 
     - Compression quality switch

.. carta:class:: carta-f2b spatialconfig

.. _spatialconfig:

SpatialConfig
~~~~~~~~~~~~~

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - coordinate
     - string
     - 
     - The required spatial coordinate (“x” or “y”).
   * - start
     - sfixed32
     - 
     - The start of the required range (inclusive). If the start and end are the same (i.e. the range is empty), the default of 0 is used.
   * - end
     - sfixed32
     - 
     - The end of the required range (exclusive). If the start and end are the same (i.e. the range is empty), the height or width of the image is used.
   * - mip
     - sfixed32
     - 
     - The maximum required mip. The backend must return data of at least this resolution, but may return a higher resolution. If this is unset or 0, the full-resolution data is used.
   * - width
     - sfixed32
     - 
     - Width of line region for line profile.  Not used for point region.

.. carta:class:: carta-b2f spatialprofiledata

.. _spatialprofiledata:

SpatialProfileData
~~~~~~~~~~~~~~~~~~

Source file: `stream/spatial_profile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/spatial_profile.proto>`_

SPATIAL_PROFILE_DATA:
Data for spatial profile set for a specific file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the profile corresponds to
   * - region_id
     - sfixed32
     - 
     - The region_id corresponding to this profile. If the profile corresponds to the cursor position, the region ID is zero.
   * - x
     - sfixed32
     - 
     - The pixel X-coordinate of the profile set
   * - y
     - sfixed32
     - 
     - The pixel Y-coordinate of the profile set
   * - channel
     - sfixed32
     - 
     - The image channel used to generate the profiles
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the profiles
   * - value
     - float
     - 
     - The value of the image at the given coordinates
   * - profiles
     - :carta:refc:`SpatialProfile`
     - repeated
     - Spatial profiles for each required profile type

.. carta:class:: carta-f2b spectralconfig

.. _spectralconfig:

SpectralConfig
~~~~~~~~~~~~~~

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - coordinate
     - string
     - 
     - The required spectral coordinate (“z”), optionally preceded by a polarization parameter. If no polarization parameter is present, or if the coordinate is empty, the active polarization parameter is used.
   * - stats_types
     - :carta:refc:`StatsType`
     - repeated
     - The required stats type. If the region is a point region, this field is ignored.

.. carta:class:: carta-b2f spectralprofiledata

.. _spectralprofiledata:

SpectralProfileData
~~~~~~~~~~~~~~~~~~~

Source file: `stream/spectral_profile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/spectral_profile.proto>`_

SPECTRAL_PROFILE_DATA:
Data for spectral profile set for a specific file

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the profile corresponds to
   * - region_id
     - sfixed32
     - 
     - The region ID that the stats data corresponds to. If the profile corresponds to the cursor position, the region ID has a value of 0.
   * - stokes
     - sfixed32
     - 
     - The image stokes parameter used to generate the profiles
   * - progress
     - float
     - 
     - Progress indicator, in the case of partial profile results being sent. If the profile calculations are time-consuming, regular updates should be sent to the frontend. If the data is complete, progress >= 1.
   * - profiles
     - :carta:refc:`SpectralProfile`
     - repeated
     - Spatial profiles for each required profile type

.. carta:class:: carta-f2b startanimation

.. _startanimation:

StartAnimation
~~~~~~~~~~~~~~

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

START_ANIMATION:
Starts an animation, as defined by the start, stop and step definitions.
Backend responds with :carta:refc:`START_ANIMATION_ACK`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the animation describes.
   * - first_frame
     - :carta:refc:`AnimationFrame`
     - 
     - The lower bound of the animation when looping.
   * - start_frame
     - :carta:refc:`AnimationFrame`
     - 
     - The starting point of the animation.
   * - last_frame
     - :carta:refc:`AnimationFrame`
     - 
     - The upper bound of the animation.
   * - delta_frame
     - :carta:refc:`AnimationFrame`
     - 
     - The frame change step for the animation. For example, a delta frame of {channel=1, stokes=0} would step through each channel in the file.
   * - frame_rate
     - sfixed32
     - 
     - Frame rate per second
   * - looping
     - bool
     - 
     - Whether to loop the animation indefinitely.
   * - reverse
     - bool
     - 
     - Whether to reverse the animation direction when endFrame is reached.
   * - required_tiles
     - :carta:refc:`AddRequiredTiles`
     - 
     - Required tiles when changing channels
   * - matched_frames
     - map<key: sfixed32, value: :carta:refc:`MatchedFrameList`>
     - repeated
     - 
   * - stokes_indices
     - sfixed32
     - repeated
     - Required stokes frames with respect to stokes types

.. carta:class:: carta-b2f startanimationack

.. _startanimationack:

StartAnimationAck
~~~~~~~~~~~~~~~~~

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

START_ANIMATION_ACK
Response for :carta:refc:`START_ANIMATION`

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - success
     - bool
     - 
     - Defines whether :carta:refc:`START_ANIMATION` was successful
   * - message
     - string
     - 
     - Error message (if applicable)
   * - animation_id
     - sfixed32
     - 
     - The animation ID of the new animation

.. carta:class:: carta-f2b statsconfig

.. _statsconfig:

StatsConfig
~~~~~~~~~~~

Source file: `control/region_requirements.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/region_requirements.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - coordinate
     - string
     - 
     - 
   * - stats_types
     - :carta:refc:`StatsType`
     - repeated
     - 

.. carta:class:: carta-f2b stokesfile

.. _stokesfile:

StokesFile
~~~~~~~~~~

Source file: `control/concat_stokes_files.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/concat_stokes_files.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - directory
     - string
     - 
     - Required directory name
   * - file
     - string
     - 
     - Required file name
   * - hdu
     - string
     - 
     - Which HDU to load (if applicable). If left blank, the first HDU will be used
   * - polarization_type
     - :carta:refc:`PolarizationType`
     - 
     - Polarization type

.. carta:class:: carta-f2b stopanimation

.. _stopanimation:

StopAnimation
~~~~~~~~~~~~~

Source file: `control/animation.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/animation.proto>`_

STOP_ANIMATION
Stops the playing animation

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Which file slot the animation describes.
   * - end_frame
     - :carta:refc:`AnimationFrame`
     - 
     - The ending point of the animation.

.. carta:class:: carta-f2b stopfilelist

.. _stopfilelist:

StopFileList
~~~~~~~~~~~~

Source file: `request/file_list.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/file_list.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_list_type
     - :carta:refc:`FileListType`
     - 
     - 

.. carta:class:: carta-f2b stopfitting

.. _stopfitting:

StopFitting
~~~~~~~~~~~

Source file: `request/fitting_request.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/request/fitting_request.proto>`_

STOP_FITTING:
Cancels the requested fitting.

.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Stop image fitting with respect to the image file id

.. carta:class:: carta-f2b stopmomentcalc

.. _stopmomentcalc:

StopMomentCalc
~~~~~~~~~~~~~~

Source file: `control/stop_moment_calc.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/stop_moment_calc.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Stop the moment calculation with respect to the image file id

.. carta:class:: carta-f2b stoppvcalc

.. _stoppvcalc:

StopPvCalc
~~~~~~~~~~

Source file: `control/stop_pv_calc.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/stop_pv_calc.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - Stop the PV image calculation for the image file id

.. carta:class:: carta-f2b stoppvpreview

.. _stoppvpreview:

StopPvPreview
~~~~~~~~~~~~~

Source file: `control/stop_pv_calc.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/control/stop_pv_calc.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - preview_id
     - sfixed32
     - 
     - Stop the PV preview for the preview viewer id

.. carta:class:: carta-b2f vectoroverlaytiledata

.. _vectoroverlaytiledata:

VectorOverlayTileData
~~~~~~~~~~~~~~~~~~~~~

Source file: `stream/vector_overlay_tile.proto <https://github.com/CARTAvis/carta-protobuf/blob/dev/stream/vector_overlay_tile.proto>`_



.. list-table::
   :widths: 20 20 20 40
   :header-rows: 1
   :class: proto

   * - Field
     - Type
     - Label
     - Description
   * - file_id
     - sfixed32
     - 
     - The file ID that the vector overlay image corresponds to
   * - channel
     - sfixed32
     - 
     - The image channel (z-coordinate)
   * - stokes_intensity
     - sfixed32
     - 
     - The Stokes coordinate that was used to generate vector intensity. If this is < 0, uniform intensity is used
   * - stokes_angle
     - sfixed32
     - 
     - The Stokes coordinate that was used to generate vector angle. If this is < 0, uniform angle is used (e.g. when rendering block markers)
   * - compression_type
     - :carta:refc:`CompressionType`
     - 
     - The compression algorithm used.
   * - compression_quality
     - float
     - 
     - Compression quality switch
   * - intensity_tiles
     - :carta:refc:`TileData`
     - repeated
     - List of tile data for vector intensity. The length of this list must match that of ``angle_tiles``, or be zero
   * - angle_tiles
     - :carta:refc:`TileData`
     - repeated
     - List of tile data for vector angle. The length of this list must match that of ``intensity_tiles``, or be zero
   * - progress
     - double
     - 
     - Progress of the vector overlay being sent. If this is zero, the message is assumed to contain the entire contour sets

