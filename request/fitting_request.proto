syntax = "proto3";
package CARTA;

import "open_file.proto";
import "defs.proto";
import "enums.proto";

// FITTING_REQUEST:
// Requests 2D Gaussian image fitting with given initial values.
// Backend responds with FITTING_RESPONSE
message FittingRequest {
    // File ID of the image to be fit
    sfixed32 file_id = 1;
    // Initial values for 2D Gaussian fitting
    repeated GaussianComponent initial_values = 2;
    // Whether each parameter (in the order of center, amplitude, FWHM, and p.a., and with background offset at the end) should be fixed when fitting
    repeated bool fixed_params = 3;
    // Region ID. Apply field of view if the id is 0; apply the entire image if the id is -1
    sfixed32 region_id = 4;
    // Field of view parameters
    RegionInfo fov_info = 5;
    // Whether to create a model image of the fitting result
    bool create_model_image = 6;
    // Whether to create a residual image of the fitting result
    bool create_residual_image = 7;
    // Background level offset
    double offset = 8;
    // Solver of the linear least squares system in the fitting
    FittingSolverType solver = 9;
}

// FITTING_RESPONSE:
// Response for FITTING_REQUEST.
// Gives results and log of 2D Gaussian image fitting.
message FittingResponse {
    // Defines whether FITTING_REQUEST was successful
    bool success = 1;
    // Error message (if applicable)
    string message = 2;
    // Fitting result: values of the fitted parameters
    repeated GaussianComponent result_values = 3;
    // Fitting result: errors of the fitted parameters
    repeated GaussianComponent result_errors = 4;
    // Fitting log
    string log = 5;
    // Fitting result: model image
    OpenFileAck model_image = 6;
    // Fitting result: residual image
    OpenFileAck residual_image = 7;
    // Fitting result: background level offset
    double offset_value = 8;
    // Fitting result: error of background level offset
    double offset_error = 9;
    // Fitting result: values of integrated flux of each component
    repeated double integrated_flux_values = 10;
    // Fitting result: errors of integrated flux of each component
    repeated double integrated_flux_errors = 11;
}

// FITTING_PROGRESS:
// Updates the progress of the requested fitting.
message FittingProgress {
    // File ID of the image to be fit
    sfixed32 file_id = 1;
    // Progess of the fitting procedure, ranging from 0 to 1
    float progress = 2;
}

// STOP_FITTING:
// Cancels the requested fitting.
message StopFitting {
    // Stop image fitting with respect to the image file id
    sfixed32 file_id = 1;
}
