syntax = "proto3";
package CARTA;

import "defs.proto";
import "tiles.proto";

// START_ANIMATION:
// Starts an animation, as defined by the start, stop and step definitions.
// Backend responds with START_ANIMATION_ACK
message StartAnimation {
    // Which file slot the animation describes.
    sfixed32 file_id = 1;
    // The lower bound of the animation when looping.
    AnimationFrame first_frame = 2;
    // The starting point of the animation.
    AnimationFrame start_frame = 3;
    // The upper bound of the animation.
    AnimationFrame last_frame = 4;
    // The frame change step for the animation. For example, a delta frame of {channel=1, stokes=0}
    // would step through each channel in the file.
    AnimationFrame delta_frame = 5;
    // Frame rate per second
    sfixed32 frame_rate = 6;
    // Whether to loop the animation indefinitely.
    bool looping = 7;
    // Whether to reverse the animation direction when endFrame is reached.
    bool reverse = 8;
    // Required tiles when changing channels
    AddRequiredTiles required_tiles = 9;
    map<sfixed32, MatchedFrameList> matched_frames = 10;
}

// START_ANIMATION_ACK
// Response for START_ANIMATION
message StartAnimationAck {
    // Defines whether START_ANIMATION was successful
    bool success = 1;
    // Error message (if applicable)
    string message = 2;
    // The animation ID of the new animation
    sfixed32 animation_id = 3;
}

// ANIMATION_FLOW_CONTROL
// Used for informing the backend of which frames have been received
message AnimationFlowControl {
    sfixed32 file_id = 1;
    // The latest flow control frame received
    AnimationFrame received_frame = 2;
    // The animation ID that the flow control message belongs to
    sfixed32 animation_id = 3;
    // Timestamp at which the frame was received
    sfixed64 timestamp = 4;
}

// STOP_ANIMATION
// Stops the playing animation
message StopAnimation {
    // Which file slot the animation describes.
    sfixed32 file_id = 1;
    // The ending point of the animation.
    AnimationFrame end_frame = 2;
}
