syntax = "proto3";
package CARTA;

import "defs.proto";
import "enums.proto";

// SET_STATS_REQUIREMENTS:
// Sets which stats data needs to be streamed to the frontend when the region is updated
message SetStatsRequirements {
    // Which file slot the requirements describe
    sfixed32 file_id = 1;
    // ID of the region that is having requirements defined. If a region ID of -1 is given, this corresponds to the entire 2D image.
    sfixed32 region_id = 2;
    // List of required stats
    repeated StatsConfig stats_configs = 3;

    message StatsConfig {
        string coordinate = 1;
        repeated StatsType stats_types = 2;
    }
}

// SET_HISTOGRAM_REQUIREMENTS:
// Sets which histogram data needs to be streamed to the frontend when the region is updated
message SetHistogramRequirements {
    // Which file slot the requirements describe
    sfixed32 file_id = 1;
    // ID of the region that is having requirements defined. If a region ID of -1 is given, this corresponds to the entire 2D image.
    sfixed32 region_id = 2;
    // List of required histograms, along with the number of bins. If the channel is -1, the current channel is used. If the channel is -2,
    // the histogram is constructed over all channels. If the number of bins is less than zero, an automatic bin size is used, based on the number of values.
    repeated HistogramConfig histograms = 3;
}

// SET_SPATIAL_REQUIREMENTS:
// Sets which information needs to be streamed to the frontend when the region is updated
message SetSpatialRequirements {
    // Which file slot the requirements describe
    sfixed32 file_id = 1;
    // ID of the region that is having requirements defined. If a region ID of 0 is given, this corresponds to the point region defined by the cursor position.
    sfixed32 region_id = 2;
    // List of spatial profiles needed.
    repeated SpatialConfig spatial_profiles = 3;
    
    message SpatialConfig {
        // The required spatial coordinate (“x” or “y”).
        string coordinate = 1;
        // The start of the required range (inclusive). If the start and end are the same (i.e. the range is empty), the default of 0 is used.
        sfixed32 start = 2;
        // The end of the required range (exclusive). If the start and end are the same (i.e. the range is empty), the height or width of the image is used.
        sfixed32 end = 3;
        // The maximum required mip. The backend must return data of at least this resolution, but may return a higher resolution. If this is unset or 0, the full-resolution data is used.
        sfixed32 mip = 4;
        // Width of line region for line profile.  Not used for point region.
        sfixed32 width = 5;
    }
}

// SET_SPECTRAL_REQUIREMENTS:
// Sets which spectral profile data needs to be streamed to the frontend when the region is updated
message SetSpectralRequirements {
    // Which file slot the requirements describe
    sfixed32 file_id = 1;
    // ID of the region that is having requirements defined. If a region ID of 0 is given, this corresponds to the point region defined by the cursor position.
    sfixed32 region_id = 2;
    // List of spectral profiles needed, along with which stats types are needed for each profile.
    repeated SpectralConfig spectral_profiles = 3;

    message SpectralConfig {
        // The required spectral coordinate (“z”), optionally preceded by a polarization parameter. If no polarization parameter is present, or if the coordinate is empty, the active polarization parameter is used.
        string coordinate = 1;
        // The required stats type. If the region is a point region, this field is ignored.
        repeated StatsType stats_types = 2;
    }
}
