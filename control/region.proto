syntax = "proto3";
package CARTA;

import "shared/enums.proto";
import "shared/defs.proto";

// SET_REGION:
// Creates or updates a region. Backend responds with SET_REGION_ACK
message SetRegion {
    // ID of the file that this region is associated with.
    // When a file is closed, all associated regions should be removed on the backend and frontend.
    fixed32 file_id = 1;
    // Unique region ID. <0 if a new region is being created.
    sfixed32 region_id = 2;
    // The name of the region, displayed as an annotation label.
    string region_name = 3;
    // The type of region described by the control points. The meaning of the control points will differ,
    // depending on the type of region being defined. For example, an ellipse will require three control points:
    // center, vertex and co-vertex. A rectangle requires two control points: top left and bottom right
    RegionType region_type = 4;
    // Minimum channel bound for the region. Set to < 0 if not required
    sfixed32 channel_min = 5;
    // Maximum channel bound for the region. Set to < 0 if not required
    sfixed32 channel_max = 6;
    // Index of selected Stokes values. If this is empty, the current Stokes value is used
    repeated fixed32 stokes = 7;
    // Control points for the region
    repeated Point control_points = 8;
    // (Only applicable for ellipse and rectangle) Rotation of the region in the xy plane (radians).
    float rotation = 9;
}

// SET_REGION_ACK:
// Response for SET_REGION
message SetRegionAck {
    // Defines whether SET_REGION was successful
    bool success = 1;
    // Error message (if applicable)
    string message = 2;
    // The unique region ID. If the region is updated, this will be the same as the region ID specified in SET_REGION.
    // If  a new region is being created, the ID of the new region will be passed back.
    fixed32 region_id = 3;
}

// REMOVE_REGION:
// Removes a region
message RemoveRegion {
    // Unique region ID of the region to be removed
    fixed32 region_id = 1;
}

// SET_REGION_REQUIREMENTS:
// Sets which information needs to be streamed to the frontend when the region is updated
message SetRegionRequirements {
    fixed32 file_id = 1;
    // ID of the region that is having requirements defined. If a region ID of 0 is given,
    // this corresponds to the point region defined by the cursor position.
    fixed32 region_id = 2;
    // Is the X-profile (of the current Stokes parameter) required?
    bool x = 3;
    // Is the Y-profile (of the current Stokes parameter) required?
    bool y = 4;
    // Is the Z-profile (of the current Stokes parameter) required?
    bool z = 5;
    // List of additional profiles needed (for example, [“Qz”, “Uz”]) will include the Z-profile of the
    // Q and U Stokes cube, regardless of which Stokes parameter is currently in use.
    repeated string additional_profiles = 6;
}