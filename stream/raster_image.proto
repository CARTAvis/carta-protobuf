syntax = "proto3";
package Stream;

// RASTER_IMAGE_DATA:
// Data for an image rendered in raster mode.
message RasterImageData {
    // The file ID that the raster image corresponds to
    fixed32 file_id = 1;
    // The layer ID that the raster image corresponds to
    fixed32 layer_id = 2;
    // Starting x-coordinate of the image region in image space
    fixed32 x = 3;
    // Starting y-coordinate of the image region in image space
    fixed32 y = 4;
    // Width (in the x-direction) of the image region in image space
    fixed32 width = 5;
    // Height (in the y-direction) of the image region in image space
    fixed32 height = 6;
    // The image stokes coordinate
    fixed32 stokes = 7;
    // The image channel (z-coordinate)
    fixed32 channel = 8;
    // The mip level used. The mip level defines how many image pixels correspond to the downsampled image
    fixed32 mip = 9;
    // The compression algorithm used.
    CompressionType compression_type = 10;
    // Compression quality switch
    float compression_quality = 11;
    // The number of subsets that the data is broken into (for multithreaded compression/decompression)
    fixed32 num_subsets = 12;
    // Image data. For uncompressed data, this is converted into FP32, while for compressed data, this is passed to the compression library for decompression.
    repeated bytes image_data = 13;
    // Run-length encodings of NaN values removed before compression. These values are used to restore the imageâ€™s NaN values after decompression.
    repeated bytes nan_encodings = 14;

    enum CompressionType {
        NONE = 0;
        ZFP = 1;
        SZ = 2;
    }
}