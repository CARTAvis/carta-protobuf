syntax = "proto3";
package CARTA;

import "enums.proto";

//
// Utility definitions and sub-messages for the Control package
//

message Point {
    float x = 1;
    float y = 2;
}

// File info message structure (internal use only)
message FileInfo {
    string name = 1;
    FileType type = 2;
    sfixed64 size = 3;
    repeated string HDU_list = 4;
    sfixed64 date = 5;
}

message FileInfoExtended {
    // Number of dimensions of the image file
    sfixed32 dimensions = 1;
    // Width of the XY plane
    sfixed32 width = 2;
    // Height of the XY plane
    sfixed32 height = 3;
    // Number of channels
    sfixed32 depth = 4;
    // Number of Stokes parameters
    sfixed32 stokes = 5;
    // List of Stokes parameters contained in the file (if applicable). For files that do not explicitly specify Stokes files, this will be blank.
    repeated string stokes_vals = 6;
    // Header entries from header string or attributes
    repeated HeaderEntry header_entries = 7;
    repeated HeaderEntry computed_entries = 8;
}

message HeaderEntry {
    string name = 1;
    string value = 2;
    EntryType entry_type = 3;
    double numeric_value = 4;
    string comment = 5;
}

message IntBounds {
    sfixed32 min = 1;
    sfixed32 max = 2;
}

message FloatBounds {
    float min = 1;
    float max = 2;
}

message DoubleBounds {
    double min = 1;
    double max = 2;
}

message ImageBounds {
    sfixed32 x_min = 1;
    sfixed32 x_max = 2;
    sfixed32 y_min = 3;
    sfixed32 y_max = 4;
}

message AnimationFrame {
    sfixed32 channel = 1;
    sfixed32 stokes = 2;
}

message SpatialProfile {
    sfixed32 start = 1;
    sfixed32 end = 2;
    bytes raw_values_fp32 = 3;
    string coordinate = 4;
}

message SpectralProfile {
    string coordinate = 1;
    StatsType stats_type = 2;
    bytes raw_values_fp32 = 3;
    bytes raw_values_fp64 = 4;
}

message StatisticsValue {
    StatsType stats_type = 1;
    double value = 2;
}

message Histogram {
    sfixed32 channel = 1;
    sfixed32 num_bins = 2;
    double bin_width = 3;
    double first_bin_center = 4;
    repeated sfixed32 bins = 5;
    double mean = 6;
    double std_dev = 7;
}

message RegionInfo {
    // The type of region described by the control points. The meaning of the control points will differ,
    // depending on the type of region being defined.
    RegionType region_type = 1;
    // Control points for the region
    repeated Point control_points = 2;
    // (Only applicable for ellipse and rectangle) Rotation of the region in the xy plane (radians).
    float rotation = 3;
}

message RegionStyle {
    // The name of the region, displayed as an annotation label.
    string name = 1;
    // Color as a name ("blue"), RGB string, or hex string
    string color = 2;
    // Width in pixels
    sfixed32 line_width = 3;
    // Dash length: on, off
    repeated sfixed32 dash_list = 4;
}

message CatalogFileInfo {
    string name = 1;
    CatalogFileType type = 2;
    sfixed64 file_size = 3;
    string description = 4;
    repeated Coosys coosys = 5;
    sfixed64 date = 6;
}

message Coosys {
    string equinox = 1;
    string epoch = 2;
    string system = 3;
}

message CatalogHeader {
    string name = 1;
    ColumnType data_type = 2;
    sfixed32 column_index = 3;
    string description = 5;
    string units = 6;
}

message ColumnData {
    ColumnType data_type = 1;
    // All data types other than string sent as binary
    repeated string string_data = 2;
    // binary data will get converted to a TypedArray
    bytes binary_data = 3;
}

message FilterConfig {
    string column_name = 1;
    ComparisonOperator comparison_operator = 2;
    double value = 3;
    double secondary_value = 4;
    string sub_string = 5;
}

message CatalogImageBounds {
    string x_column_name = 1;
    string y_column_name = 2;
    ImageBounds image_bounds = 3;
}

message MatchedFrameList {
    repeated float frame_numbers = 1;
}

// describe each beam for multi-beam images
message Beam {
    sfixed32 channel = 1;
    sfixed32 stokes = 2;
    float major_axis = 3;
    float minor_axis = 4;
    float pa = 5;
}

message ListProgress {
    FileListType file_list_type = 1;
    float percentage = 2;
    sfixed32 checked_count = 3;
    sfixed32 total_count = 4;
}